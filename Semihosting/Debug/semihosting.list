
semihosting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003888  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08003a28  08003a28  00013a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b70  08003b70  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003b70  08003b70  00013b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b78  08003b78  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b78  08003b78  00013b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000070  08003bf0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003bf0  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007985  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013f5  00000000  00000000  00027a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000638  00000000  00000000  00028e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004bb  00000000  00000000  00029498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015635  00000000  00000000  00029953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a41  00000000  00000000  0003ef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000850f8  00000000  00000000  000469c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025d8  00000000  00000000  000cbac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ce09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003a10 	.word	0x08003a10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003a10 	.word	0x08003a10

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0c4      	sub	sp, #272	; 0x110
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char buffer[255];
	uint8_t counter = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
	initialise_monitor_handles();
 8000598:	f001 feee 	bl	8002378 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 fa6a 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f852 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8e6 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a8:	f000 f8ba 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello World\nEnter your name: ");
 80005ac:	481f      	ldr	r0, [pc, #124]	; (800062c <main+0xa0>)
 80005ae:	f002 fae3 	bl	8002b78 <iprintf>
  //HAL_Delay(1000);
  gets(buffer);
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fad7 	bl	8002b68 <gets>
  //HAL_Delay(1000);
  printf("\nHello %s!!!\n", buffer);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	4619      	mov	r1, r3
 80005be:	481c      	ldr	r0, [pc, #112]	; (8000630 <main+0xa4>)
 80005c0:	f002 fada 	bl	8002b78 <iprintf>
  //File Descriptor to Text File
  FILE *fd_txt_file = fopen("/home/shankaraditya/STM32CubeIDE/workspace_1.14.0/semihosting/sample1.txt", "w+");
 80005c4:	491b      	ldr	r1, [pc, #108]	; (8000634 <main+0xa8>)
 80005c6:	481c      	ldr	r0, [pc, #112]	; (8000638 <main+0xac>)
 80005c8:	f002 f9ac 	bl	8002924 <fopen>
 80005cc:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
  //File Descriptor to Binary File
  FILE *fd_binary_file = fopen("/home/shankaraditya/STM32CubeIDE/workspace_1.14.0/semihosting/sample2.bin", "wb+");
 80005d0:	491a      	ldr	r1, [pc, #104]	; (800063c <main+0xb0>)
 80005d2:	481b      	ldr	r0, [pc, #108]	; (8000640 <main+0xb4>)
 80005d4:	f002 f9a6 	bl	8002924 <fopen>
 80005d8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  if(fd_txt_file)
 80005dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d009      	beq.n	80005f8 <main+0x6c>
  {
	 fprintf(fd_txt_file, "%s", buffer);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 f9f4 	bl	80029d8 <fputs>
	 fclose(fd_txt_file);
 80005f0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80005f4:	f001 ff94 	bl	8002520 <fclose>
  }
  if(fd_binary_file)
 80005f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00a      	beq.n	8000616 <main+0x8a>
  {
	  fwrite(&buffer, sizeof(char), 1, fd_binary_file);
 8000600:	1d38      	adds	r0, r7, #4
 8000602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000606:	2201      	movs	r2, #1
 8000608:	2101      	movs	r1, #1
 800060a:	f002 fa59 	bl	8002ac0 <fwrite>
	  fclose(fd_binary_file);
 800060e:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8000612:	f001 ff85 	bl	8002520 <fclose>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Counter = %d\n", counter++);
 8000616:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800061a:	1c5a      	adds	r2, r3, #1
 800061c:	f887 210f 	strb.w	r2, [r7, #271]	; 0x10f
 8000620:	4619      	mov	r1, r3
 8000622:	4808      	ldr	r0, [pc, #32]	; (8000644 <main+0xb8>)
 8000624:	f002 faa8 	bl	8002b78 <iprintf>
 8000628:	e7f5      	b.n	8000616 <main+0x8a>
 800062a:	bf00      	nop
 800062c:	08003a28 	.word	0x08003a28
 8000630:	08003a48 	.word	0x08003a48
 8000634:	08003a58 	.word	0x08003a58
 8000638:	08003a5c 	.word	0x08003a5c
 800063c:	08003aa8 	.word	0x08003aa8
 8000640:	08003aac 	.word	0x08003aac
 8000644:	08003af8 	.word	0x08003af8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	; 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0320 	add.w	r3, r7, #32
 8000652:	2230      	movs	r2, #48	; 0x30
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fc30 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	4b29      	ldr	r3, [pc, #164]	; (8000718 <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	4a28      	ldr	r2, [pc, #160]	; (8000718 <SystemClock_Config+0xd0>)
 8000676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067a:	6413      	str	r3, [r2, #64]	; 0x40
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <SystemClock_Config+0xd0>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	4b23      	ldr	r3, [pc, #140]	; (800071c <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000694:	4a21      	ldr	r2, [pc, #132]	; (800071c <SystemClock_Config+0xd4>)
 8000696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800069a:	6013      	str	r3, [r2, #0]
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a4:	607b      	str	r3, [r7, #4]
 80006a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2310      	movs	r3, #16
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006bc:	2310      	movs	r3, #16
 80006be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c6:	2304      	movs	r3, #4
 80006c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fcc4 	bl	8001060 <HAL_RCC_OscConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006de:	f000 f8b7 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e2:	230f      	movs	r3, #15
 80006e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	2302      	movs	r3, #2
 80006e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2102      	movs	r1, #2
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 ff26 	bl	8001550 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800070a:	f000 f8a1 	bl	8000850 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	; (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 f91a 	bl	8001990 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f875 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000008c 	.word	0x2000008c
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b2d      	ldr	r3, [pc, #180]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_GPIO_Init+0xd0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a25      	ldr	r2, [pc, #148]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a17      	ldr	r2, [pc, #92]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_GPIO_Init+0xd0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2120      	movs	r1, #32
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000800:	f000 fc14 	bl	800102c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000804:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	4619      	mov	r1, r3
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_GPIO_Init+0xd8>)
 800081c:	f000 fa82 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000820:	2320      	movs	r3, #32
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_GPIO_Init+0xd4>)
 8000838:	f000 fa74 	bl	8000d24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	40023800 	.word	0x40023800
 8000848:	40020000 	.word	0x40020000
 800084c:	40020800 	.word	0x40020800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_MspInit+0x4c>)
 800086c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	603b      	str	r3, [r7, #0]
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x4c>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000886:	4a08      	ldr	r2, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800088c:	6413      	str	r3, [r2, #64]	; 0x40
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800089a:	2007      	movs	r0, #7
 800089c:	f000 fa0e 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40023800 	.word	0x40023800

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a19      	ldr	r2, [pc, #100]	; (8000930 <HAL_UART_MspInit+0x84>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d12b      	bne.n	8000926 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_UART_MspInit+0x88>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	; (8000938 <HAL_UART_MspInit+0x8c>)
 8000922:	f000 f9ff 	bl	8000d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40004400 	.word	0x40004400
 8000934:	40023800 	.word	0x40023800
 8000938:	40020000 	.word	0x40020000

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f8c6 	bl	8000b18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <_sbrk+0x5c>)
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <_sbrk+0x60>)
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a4:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <_sbrk+0x64>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d102      	bne.n	80009b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <_sbrk+0x64>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <_sbrk+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	693a      	ldr	r2, [r7, #16]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d207      	bcs.n	80009d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c0:	f002 fadc 	bl	8002f7c <__errno>
 80009c4:	4603      	mov	r3, r0
 80009c6:	220c      	movs	r2, #12
 80009c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009ce:	e009      	b.n	80009e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <_sbrk+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d6:	4b07      	ldr	r3, [pc, #28]	; (80009f4 <_sbrk+0x64>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4413      	add	r3, r2
 80009de:	4a05      	ldr	r2, [pc, #20]	; (80009f4 <_sbrk+0x64>)
 80009e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009e2:	68fb      	ldr	r3, [r7, #12]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3718      	adds	r7, #24
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20018000 	.word	0x20018000
 80009f0:	00000400 	.word	0x00000400
 80009f4:	200000d4 	.word	0x200000d4
 80009f8:	200002d8 	.word	0x200002d8

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	; (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	; (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	; (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f002 fa9b 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fd9b 	bl	800058c <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a58:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a64:	08003b80 	.word	0x08003b80
  ldr r2, =_sbss
 8000a68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a6c:	200002d4 	.word	0x200002d4

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	; (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	; (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f90d 	bl	8000cbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f808 	bl	8000ab8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fed8 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x54>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0x58>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f917 	bl	8000d0a <HAL_SYSTICK_Config>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00e      	b.n	8000b04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b0f      	cmp	r3, #15
 8000aea:	d80a      	bhi.n	8000b02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aec:	2200      	movs	r2, #0
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af4:	f000 f8ed 	bl	8000cd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <HAL_InitTick+0x5c>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
 8000b00:	e000      	b.n	8000b04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000000 	.word	0x20000000
 8000b10:	20000008 	.word	0x20000008
 8000b14:	20000004 	.word	0x20000004

08000b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x20>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_IncTick+0x24>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <HAL_IncTick+0x24>)
 8000b2a:	6013      	str	r3, [r2, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	200000d8 	.word	0x200000d8

08000b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b03      	ldr	r3, [pc, #12]	; (8000b54 <HAL_GetTick+0x14>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	200000d8 	.word	0x200000d8

08000b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b6e:	68ba      	ldr	r2, [r7, #8]
 8000b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <__NVIC_SetPriorityGrouping+0x44>)
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	60d3      	str	r3, [r2, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	0a1b      	lsrs	r3, r3, #8
 8000baa:	f003 0307 	and.w	r3, r3, #7
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	db0a      	blt.n	8000be6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	490c      	ldr	r1, [pc, #48]	; (8000c08 <__NVIC_SetPriority+0x4c>)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	0112      	lsls	r2, r2, #4
 8000bdc:	b2d2      	uxtb	r2, r2
 8000bde:	440b      	add	r3, r1
 8000be0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be4:	e00a      	b.n	8000bfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4908      	ldr	r1, [pc, #32]	; (8000c0c <__NVIC_SetPriority+0x50>)
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	3b04      	subs	r3, #4
 8000bf4:	0112      	lsls	r2, r2, #4
 8000bf6:	b2d2      	uxtb	r2, r2
 8000bf8:	440b      	add	r3, r1
 8000bfa:	761a      	strb	r2, [r3, #24]
}
 8000bfc:	bf00      	nop
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000e100 	.word	0xe000e100
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b089      	sub	sp, #36	; 0x24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	f1c3 0307 	rsb	r3, r3, #7
 8000c2a:	2b04      	cmp	r3, #4
 8000c2c:	bf28      	it	cs
 8000c2e:	2304      	movcs	r3, #4
 8000c30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	3304      	adds	r3, #4
 8000c36:	2b06      	cmp	r3, #6
 8000c38:	d902      	bls.n	8000c40 <NVIC_EncodePriority+0x30>
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	3b03      	subs	r3, #3
 8000c3e:	e000      	b.n	8000c42 <NVIC_EncodePriority+0x32>
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	43da      	mvns	r2, r3
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	401a      	ands	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	43d9      	mvns	r1, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	4313      	orrs	r3, r2
         );
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3724      	adds	r7, #36	; 0x24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
	...

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c88:	d301      	bcc.n	8000c8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e00f      	b.n	8000cae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c8e:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <SysTick_Config+0x40>)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c96:	210f      	movs	r1, #15
 8000c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f7ff ff8e 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <SysTick_Config+0x40>)
 8000ca8:	2207      	movs	r2, #7
 8000caa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	e000e010 	.word	0xe000e010

08000cbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff ff47 	bl	8000b58 <__NVIC_SetPriorityGrouping>
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce4:	f7ff ff5c 	bl	8000ba0 <__NVIC_GetPriorityGrouping>
 8000ce8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cea:	687a      	ldr	r2, [r7, #4]
 8000cec:	68b9      	ldr	r1, [r7, #8]
 8000cee:	6978      	ldr	r0, [r7, #20]
 8000cf0:	f7ff ff8e 	bl	8000c10 <NVIC_EncodePriority>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	bf00      	nop
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffb0 	bl	8000c78 <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61fb      	str	r3, [r7, #28]
 8000d3e:	e159      	b.n	8000ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d40:	2201      	movs	r2, #1
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	697a      	ldr	r2, [r7, #20]
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	f040 8148 	bne.w	8000fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d005      	beq.n	8000d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d130      	bne.n	8000dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	2203      	movs	r2, #3
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43db      	mvns	r3, r3
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dac:	2201      	movs	r2, #1
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	091b      	lsrs	r3, r3, #4
 8000dc2:	f003 0201 	and.w	r2, r3, #1
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	d017      	beq.n	8000e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d123      	bne.n	8000e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	08da      	lsrs	r2, r3, #3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3208      	adds	r2, #8
 8000e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	691a      	ldr	r2, [r3, #16]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0307 	and.w	r3, r3, #7
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	08da      	lsrs	r2, r3, #3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3208      	adds	r2, #8
 8000e62:	69b9      	ldr	r1, [r7, #24]
 8000e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0203 	and.w	r2, r3, #3
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	f000 80a2 	beq.w	8000fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b57      	ldr	r3, [pc, #348]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a56      	ldr	r2, [pc, #344]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b54      	ldr	r3, [pc, #336]	; (800100c <HAL_GPIO_Init+0x2e8>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec6:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	089b      	lsrs	r3, r3, #2
 8000ecc:	3302      	adds	r3, #2
 8000ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f003 0303 	and.w	r3, r3, #3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	220f      	movs	r2, #15
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a49      	ldr	r2, [pc, #292]	; (8001014 <HAL_GPIO_Init+0x2f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d019      	beq.n	8000f26 <HAL_GPIO_Init+0x202>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a48      	ldr	r2, [pc, #288]	; (8001018 <HAL_GPIO_Init+0x2f4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d013      	beq.n	8000f22 <HAL_GPIO_Init+0x1fe>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a47      	ldr	r2, [pc, #284]	; (800101c <HAL_GPIO_Init+0x2f8>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d00d      	beq.n	8000f1e <HAL_GPIO_Init+0x1fa>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a46      	ldr	r2, [pc, #280]	; (8001020 <HAL_GPIO_Init+0x2fc>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d007      	beq.n	8000f1a <HAL_GPIO_Init+0x1f6>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a45      	ldr	r2, [pc, #276]	; (8001024 <HAL_GPIO_Init+0x300>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d101      	bne.n	8000f16 <HAL_GPIO_Init+0x1f2>
 8000f12:	2304      	movs	r3, #4
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f16:	2307      	movs	r3, #7
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x204>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x2ec>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b38      	ldr	r3, [pc, #224]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a2f      	ldr	r2, [pc, #188]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b2d      	ldr	r3, [pc, #180]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b23      	ldr	r3, [pc, #140]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1a      	ldr	r2, [pc, #104]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b18      	ldr	r3, [pc, #96]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_GPIO_Init+0x304>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f aea2 	bls.w	8000d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40013c00 	.word	0x40013c00

0800102c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	460b      	mov	r3, r1
 8001036:	807b      	strh	r3, [r7, #2]
 8001038:	4613      	mov	r3, r2
 800103a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800103c:	787b      	ldrb	r3, [r7, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001042:	887a      	ldrh	r2, [r7, #2]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001048:	e003      	b.n	8001052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	887b      	ldrh	r3, [r7, #2]
 800104c:	041a      	lsls	r2, r3, #16
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	619a      	str	r2, [r3, #24]
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e267      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d075      	beq.n	800116a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107e:	4b88      	ldr	r3, [pc, #544]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b04      	cmp	r3, #4
 8001088:	d00c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800108a:	4b85      	ldr	r3, [pc, #532]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001092:	2b08      	cmp	r3, #8
 8001094:	d112      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b82      	ldr	r3, [pc, #520]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010a2:	d10b      	bne.n	80010bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a4:	4b7e      	ldr	r3, [pc, #504]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d05b      	beq.n	8001168 <HAL_RCC_OscConfig+0x108>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d157      	bne.n	8001168 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e242      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c4:	d106      	bne.n	80010d4 <HAL_RCC_OscConfig+0x74>
 80010c6:	4b76      	ldr	r3, [pc, #472]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a75      	ldr	r2, [pc, #468]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	e01d      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010dc:	d10c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x98>
 80010de:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a6f      	ldr	r2, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6c      	ldr	r2, [pc, #432]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_RCC_OscConfig+0xb0>
 80010f8:	4b69      	ldr	r3, [pc, #420]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a68      	ldr	r2, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80010fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b66      	ldr	r3, [pc, #408]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a65      	ldr	r2, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d013      	beq.n	8001140 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fd12 	bl	8000b40 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fd0e 	bl	8000b40 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e207      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001132:	4b5b      	ldr	r3, [pc, #364]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0xc0>
 800113e:	e014      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fcfe 	bl	8000b40 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff fcfa 	bl	8000b40 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e1f3      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0xe8>
 8001166:	e000      	b.n	800116a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001168:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b00      	cmp	r3, #0
 8001174:	d063      	beq.n	800123e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001176:	4b4a      	ldr	r3, [pc, #296]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00b      	beq.n	800119a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001182:	4b47      	ldr	r3, [pc, #284]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d11c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b44      	ldr	r3, [pc, #272]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d116      	bne.n	80011c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d005      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d001      	beq.n	80011b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e1c7      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4937      	ldr	r1, [pc, #220]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	e03a      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d020      	beq.n	8001212 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d0:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_OscConfig+0x244>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fcb3 	bl	8000b40 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fcaf 	bl	8000b40 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e1a8      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	4925      	ldr	r1, [pc, #148]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 800120c:	4313      	orrs	r3, r2
 800120e:	600b      	str	r3, [r1, #0]
 8001210:	e015      	b.n	800123e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x244>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001218:	f7ff fc92 	bl	8000b40 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001220:	f7ff fc8e 	bl	8000b40 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e187      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001232:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1f0      	bne.n	8001220 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d036      	beq.n	80012b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d016      	beq.n	8001280 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001258:	f7ff fc72 	bl	8000b40 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001260:	f7ff fc6e 	bl	8000b40 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b02      	cmp	r3, #2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e167      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <HAL_RCC_OscConfig+0x240>)
 8001274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0x200>
 800127e:	e01b      	b.n	80012b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <HAL_RCC_OscConfig+0x248>)
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fc5b 	bl	8000b40 <HAL_GetTick>
 800128a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	e00e      	b.n	80012ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128e:	f7ff fc57 	bl	8000b40 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d907      	bls.n	80012ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e150      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80012a0:	40023800 	.word	0x40023800
 80012a4:	42470000 	.word	0x42470000
 80012a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012ac:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ea      	bne.n	800128e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 8097 	beq.w	80013f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ca:	4b81      	ldr	r3, [pc, #516]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d10f      	bne.n	80012f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b7d      	ldr	r3, [pc, #500]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a7c      	ldr	r2, [pc, #496]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b7a      	ldr	r3, [pc, #488]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012f2:	2301      	movs	r3, #1
 80012f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f6:	4b77      	ldr	r3, [pc, #476]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d118      	bne.n	8001334 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001302:	4b74      	ldr	r3, [pc, #464]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a73      	ldr	r2, [pc, #460]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 8001308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800130c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800130e:	f7ff fc17 	bl	8000b40 <HAL_GetTick>
 8001312:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001314:	e008      	b.n	8001328 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001316:	f7ff fc13 	bl	8000b40 <HAL_GetTick>
 800131a:	4602      	mov	r2, r0
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d901      	bls.n	8001328 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001324:	2303      	movs	r3, #3
 8001326:	e10c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x474>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f0      	beq.n	8001316 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x2ea>
 800133c:	4b64      	ldr	r3, [pc, #400]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001340:	4a63      	ldr	r2, [pc, #396]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6713      	str	r3, [r2, #112]	; 0x70
 8001348:	e01c      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d10c      	bne.n	800136c <HAL_RCC_OscConfig+0x30c>
 8001352:	4b5f      	ldr	r3, [pc, #380]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001356:	4a5e      	ldr	r2, [pc, #376]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6713      	str	r3, [r2, #112]	; 0x70
 800135e:	4b5c      	ldr	r3, [pc, #368]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a5b      	ldr	r2, [pc, #364]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	e00b      	b.n	8001384 <HAL_RCC_OscConfig+0x324>
 800136c:	4b58      	ldr	r3, [pc, #352]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800136e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001370:	4a57      	ldr	r2, [pc, #348]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 0301 	bic.w	r3, r3, #1
 8001376:	6713      	str	r3, [r2, #112]	; 0x70
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a54      	ldr	r2, [pc, #336]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0304 	bic.w	r3, r3, #4
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d015      	beq.n	80013b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138c:	f7ff fbd8 	bl	8000b40 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001392:	e00a      	b.n	80013aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001394:	f7ff fbd4 	bl	8000b40 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0cb      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	4b49      	ldr	r3, [pc, #292]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0ee      	beq.n	8001394 <HAL_RCC_OscConfig+0x334>
 80013b6:	e014      	b.n	80013e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b8:	f7ff fbc2 	bl	8000b40 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fbbe 	bl	8000b40 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0b5      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	4b3e      	ldr	r3, [pc, #248]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1ee      	bne.n	80013c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d105      	bne.n	80013f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e8:	4b39      	ldr	r3, [pc, #228]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a38      	ldr	r2, [pc, #224]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80013ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f000 80a1 	beq.w	8001540 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fe:	4b34      	ldr	r3, [pc, #208]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d05c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d141      	bne.n	8001496 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff fb92 	bl	8000b40 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff fb8e 	bl	8000b40 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e087      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b27      	ldr	r3, [pc, #156]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	491b      	ldr	r1, [pc, #108]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b1b      	ldr	r3, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fb67 	bl	8000b40 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff fb63 	bl	8000b40 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e05c      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x416>
 8001494:	e054      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_RCC_OscConfig+0x478>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fb50 	bl	8000b40 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff fb4c 	bl	8000b40 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e045      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_RCC_OscConfig+0x470>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x444>
 80014c2:	e03d      	b.n	8001540 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d107      	bne.n	80014dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e038      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000
 80014d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <HAL_RCC_OscConfig+0x4ec>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d028      	beq.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d121      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d11a      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800150c:	4013      	ands	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001512:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001514:	4293      	cmp	r3, r2
 8001516:	d111      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d107      	bne.n	800153c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001536:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d001      	beq.n	8001540 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40023800 	.word	0x40023800

08001550 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d101      	bne.n	8001564 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e0cc      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001564:	4b68      	ldr	r3, [pc, #416]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d90c      	bls.n	800158c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001572:	4b65      	ldr	r3, [pc, #404]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800157a:	4b63      	ldr	r3, [pc, #396]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d001      	beq.n	800158c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0b8      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a4:	4b59      	ldr	r3, [pc, #356]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4a52      	ldr	r2, [pc, #328]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015c8:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	494d      	ldr	r1, [pc, #308]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d044      	beq.n	8001670 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d107      	bne.n	80015fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ee:	4b47      	ldr	r3, [pc, #284]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d119      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e07f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	2b03      	cmp	r3, #3
 800160c:	d107      	bne.n	800161e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d109      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e06f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161e:	4b3b      	ldr	r3, [pc, #236]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e067      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162e:	4b37      	ldr	r3, [pc, #220]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f023 0203 	bic.w	r2, r3, #3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	4934      	ldr	r1, [pc, #208]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	4313      	orrs	r3, r2
 800163e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001640:	f7ff fa7e 	bl	8000b40 <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	e00a      	b.n	800165e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001648:	f7ff fa7a 	bl	8000b40 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e04f      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165e:	4b2b      	ldr	r3, [pc, #172]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	f003 020c 	and.w	r2, r3, #12
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	429a      	cmp	r2, r3
 800166e:	d1eb      	bne.n	8001648 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 0307 	and.w	r3, r3, #7
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	429a      	cmp	r2, r3
 800167c:	d20c      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167e:	4b22      	ldr	r3, [pc, #136]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e032      	b.n	80016fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4916      	ldr	r1, [pc, #88]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c2:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	490e      	ldr	r1, [pc, #56]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016d6:	f000 f821 	bl	800171c <HAL_RCC_GetSysClockFreq>
 80016da:	4602      	mov	r2, r0
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	490a      	ldr	r1, [pc, #40]	; (8001710 <HAL_RCC_ClockConfig+0x1c0>)
 80016e8:	5ccb      	ldrb	r3, [r1, r3]
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016f2:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1c8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff f9de 	bl	8000ab8 <HAL_InitTick>

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00
 800170c:	40023800 	.word	0x40023800
 8001710:	08003b08 	.word	0x08003b08
 8001714:	20000000 	.word	0x20000000
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b094      	sub	sp, #80	; 0x50
 8001722:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	; 0x44
 8001728:	2300      	movs	r3, #0
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800172c:	2300      	movs	r3, #0
 800172e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001734:	4b79      	ldr	r3, [pc, #484]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f003 030c 	and.w	r3, r3, #12
 800173c:	2b08      	cmp	r3, #8
 800173e:	d00d      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x40>
 8001740:	2b08      	cmp	r3, #8
 8001742:	f200 80e1 	bhi.w	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x34>
 800174a:	2b04      	cmp	r3, #4
 800174c:	d003      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x3a>
 800174e:	e0db      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001750:	4b73      	ldr	r3, [pc, #460]	; (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 8001752:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001754:	e0db      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001756:	4b73      	ldr	r3, [pc, #460]	; (8001924 <HAL_RCC_GetSysClockFreq+0x208>)
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800175a:	e0d8      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800175c:	4b6f      	ldr	r3, [pc, #444]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001764:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001766:	4b6d      	ldr	r3, [pc, #436]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d063      	beq.n	800183a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001772:	4b6a      	ldr	r3, [pc, #424]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	2200      	movs	r2, #0
 800177a:	63bb      	str	r3, [r7, #56]	; 0x38
 800177c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800177e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	; 0x34
 800178a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800178e:	4622      	mov	r2, r4
 8001790:	462b      	mov	r3, r5
 8001792:	f04f 0000 	mov.w	r0, #0
 8001796:	f04f 0100 	mov.w	r1, #0
 800179a:	0159      	lsls	r1, r3, #5
 800179c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017a0:	0150      	lsls	r0, r2, #5
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4621      	mov	r1, r4
 80017a8:	1a51      	subs	r1, r2, r1
 80017aa:	6139      	str	r1, [r7, #16]
 80017ac:	4629      	mov	r1, r5
 80017ae:	eb63 0301 	sbc.w	r3, r3, r1
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017c0:	4659      	mov	r1, fp
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4651      	mov	r1, sl
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4651      	mov	r1, sl
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4651      	mov	r1, sl
 80017d0:	ebb2 0801 	subs.w	r8, r2, r1
 80017d4:	4659      	mov	r1, fp
 80017d6:	eb63 0901 	sbc.w	r9, r3, r1
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	f04f 0300 	mov.w	r3, #0
 80017e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017ee:	4690      	mov	r8, r2
 80017f0:	4699      	mov	r9, r3
 80017f2:	4623      	mov	r3, r4
 80017f4:	eb18 0303 	adds.w	r3, r8, r3
 80017f8:	60bb      	str	r3, [r7, #8]
 80017fa:	462b      	mov	r3, r5
 80017fc:	eb49 0303 	adc.w	r3, r9, r3
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800180e:	4629      	mov	r1, r5
 8001810:	024b      	lsls	r3, r1, #9
 8001812:	4621      	mov	r1, r4
 8001814:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001818:	4621      	mov	r1, r4
 800181a:	024a      	lsls	r2, r1, #9
 800181c:	4610      	mov	r0, r2
 800181e:	4619      	mov	r1, r3
 8001820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001822:	2200      	movs	r2, #0
 8001824:	62bb      	str	r3, [r7, #40]	; 0x28
 8001826:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001828:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800182c:	f7fe fd30 	bl	8000290 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001838:	e058      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	2200      	movs	r2, #0
 8001842:	4618      	mov	r0, r3
 8001844:	4611      	mov	r1, r2
 8001846:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800184a:	623b      	str	r3, [r7, #32]
 800184c:	2300      	movs	r3, #0
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
 8001850:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001854:	4642      	mov	r2, r8
 8001856:	464b      	mov	r3, r9
 8001858:	f04f 0000 	mov.w	r0, #0
 800185c:	f04f 0100 	mov.w	r1, #0
 8001860:	0159      	lsls	r1, r3, #5
 8001862:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001866:	0150      	lsls	r0, r2, #5
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4641      	mov	r1, r8
 800186e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001872:	4649      	mov	r1, r9
 8001874:	eb63 0b01 	sbc.w	fp, r3, r1
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001884:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001888:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800188c:	ebb2 040a 	subs.w	r4, r2, sl
 8001890:	eb63 050b 	sbc.w	r5, r3, fp
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	f04f 0300 	mov.w	r3, #0
 800189c:	00eb      	lsls	r3, r5, #3
 800189e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018a2:	00e2      	lsls	r2, r4, #3
 80018a4:	4614      	mov	r4, r2
 80018a6:	461d      	mov	r5, r3
 80018a8:	4643      	mov	r3, r8
 80018aa:	18e3      	adds	r3, r4, r3
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	464b      	mov	r3, r9
 80018b0:	eb45 0303 	adc.w	r3, r5, r3
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	f04f 0200 	mov.w	r2, #0
 80018ba:	f04f 0300 	mov.w	r3, #0
 80018be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018c2:	4629      	mov	r1, r5
 80018c4:	028b      	lsls	r3, r1, #10
 80018c6:	4621      	mov	r1, r4
 80018c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018cc:	4621      	mov	r1, r4
 80018ce:	028a      	lsls	r2, r1, #10
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d6:	2200      	movs	r2, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	61fa      	str	r2, [r7, #28]
 80018dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018e0:	f7fe fcd6 	bl	8000290 <__aeabi_uldivmod>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4613      	mov	r3, r2
 80018ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_GetSysClockFreq+0x200>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80018fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80018fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001900:	fbb2 f3f3 	udiv	r3, r2, r3
 8001904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001906:	e002      	b.n	800190e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <HAL_RCC_GetSysClockFreq+0x204>)
 800190a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800190c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800190e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001910:	4618      	mov	r0, r3
 8001912:	3750      	adds	r7, #80	; 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800191a:	bf00      	nop
 800191c:	40023800 	.word	0x40023800
 8001920:	00f42400 	.word	0x00f42400
 8001924:	007a1200 	.word	0x007a1200

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b03      	ldr	r3, [pc, #12]	; (800193c <HAL_RCC_GetHCLKFreq+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000000 	.word	0x20000000

08001940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001944:	f7ff fff0 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001948:	4602      	mov	r2, r0
 800194a:	4b05      	ldr	r3, [pc, #20]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x20>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	4903      	ldr	r1, [pc, #12]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001956:	5ccb      	ldrb	r3, [r1, r3]
 8001958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40023800 	.word	0x40023800
 8001964:	08003b18 	.word	0x08003b18

08001968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800196c:	f7ff ffdc 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001970:	4602      	mov	r2, r0
 8001972:	4b05      	ldr	r3, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	0b5b      	lsrs	r3, r3, #13
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	4903      	ldr	r1, [pc, #12]	; (800198c <HAL_RCC_GetPCLK2Freq+0x24>)
 800197e:	5ccb      	ldrb	r3, [r1, r3]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	08003b18 	.word	0x08003b18

08001990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e042      	b.n	8001a28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d106      	bne.n	80019bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7fe ff78 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2224      	movs	r2, #36	; 0x24
 80019c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68da      	ldr	r2, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 f82b 	bl	8001a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	695a      	ldr	r2, [r3, #20]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68da      	ldr	r2, [r3, #12]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a34:	b0c0      	sub	sp, #256	; 0x100
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4c:	68d9      	ldr	r1, [r3, #12]
 8001a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	ea40 0301 	orr.w	r3, r0, r1
 8001a58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001a88:	f021 010c 	bic.w	r1, r1, #12
 8001a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001a96:	430b      	orrs	r3, r1
 8001a98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001aaa:	6999      	ldr	r1, [r3, #24]
 8001aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	ea40 0301 	orr.w	r3, r0, r1
 8001ab6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b8f      	ldr	r3, [pc, #572]	; (8001cfc <UART_SetConfig+0x2cc>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d005      	beq.n	8001ad0 <UART_SetConfig+0xa0>
 8001ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b8d      	ldr	r3, [pc, #564]	; (8001d00 <UART_SetConfig+0x2d0>)
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d104      	bne.n	8001ada <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ad0:	f7ff ff4a 	bl	8001968 <HAL_RCC_GetPCLK2Freq>
 8001ad4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ad8:	e003      	b.n	8001ae2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ada:	f7ff ff31 	bl	8001940 <HAL_RCC_GetPCLK1Freq>
 8001ade:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ae6:	69db      	ldr	r3, [r3, #28]
 8001ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001aec:	f040 810c 	bne.w	8001d08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001af4:	2200      	movs	r2, #0
 8001af6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001afa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001afe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001b02:	4622      	mov	r2, r4
 8001b04:	462b      	mov	r3, r5
 8001b06:	1891      	adds	r1, r2, r2
 8001b08:	65b9      	str	r1, [r7, #88]	; 0x58
 8001b0a:	415b      	adcs	r3, r3
 8001b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001b12:	4621      	mov	r1, r4
 8001b14:	eb12 0801 	adds.w	r8, r2, r1
 8001b18:	4629      	mov	r1, r5
 8001b1a:	eb43 0901 	adc.w	r9, r3, r1
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	f04f 0300 	mov.w	r3, #0
 8001b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b32:	4690      	mov	r8, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	4623      	mov	r3, r4
 8001b38:	eb18 0303 	adds.w	r3, r8, r3
 8001b3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001b40:	462b      	mov	r3, r5
 8001b42:	eb49 0303 	adc.w	r3, r9, r3
 8001b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001b56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001b5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001b5e:	460b      	mov	r3, r1
 8001b60:	18db      	adds	r3, r3, r3
 8001b62:	653b      	str	r3, [r7, #80]	; 0x50
 8001b64:	4613      	mov	r3, r2
 8001b66:	eb42 0303 	adc.w	r3, r2, r3
 8001b6a:	657b      	str	r3, [r7, #84]	; 0x54
 8001b6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001b70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001b74:	f7fe fb8c 	bl	8000290 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4b61      	ldr	r3, [pc, #388]	; (8001d04 <UART_SetConfig+0x2d4>)
 8001b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	011c      	lsls	r4, r3, #4
 8001b86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001b90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001b94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001b98:	4642      	mov	r2, r8
 8001b9a:	464b      	mov	r3, r9
 8001b9c:	1891      	adds	r1, r2, r2
 8001b9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ba0:	415b      	adcs	r3, r3
 8001ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ba4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ba8:	4641      	mov	r1, r8
 8001baa:	eb12 0a01 	adds.w	sl, r2, r1
 8001bae:	4649      	mov	r1, r9
 8001bb0:	eb43 0b01 	adc.w	fp, r3, r1
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bc8:	4692      	mov	sl, r2
 8001bca:	469b      	mov	fp, r3
 8001bcc:	4643      	mov	r3, r8
 8001bce:	eb1a 0303 	adds.w	r3, sl, r3
 8001bd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	eb4b 0303 	adc.w	r3, fp, r3
 8001bdc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001bec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001bf0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	18db      	adds	r3, r3, r3
 8001bf8:	643b      	str	r3, [r7, #64]	; 0x40
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	eb42 0303 	adc.w	r3, r2, r3
 8001c00:	647b      	str	r3, [r7, #68]	; 0x44
 8001c02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001c06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001c0a:	f7fe fb41 	bl	8000290 <__aeabi_uldivmod>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4611      	mov	r1, r2
 8001c14:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <UART_SetConfig+0x2d4>)
 8001c16:	fba3 2301 	umull	r2, r3, r3, r1
 8001c1a:	095b      	lsrs	r3, r3, #5
 8001c1c:	2264      	movs	r2, #100	; 0x64
 8001c1e:	fb02 f303 	mul.w	r3, r2, r3
 8001c22:	1acb      	subs	r3, r1, r3
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001c2a:	4b36      	ldr	r3, [pc, #216]	; (8001d04 <UART_SetConfig+0x2d4>)
 8001c2c:	fba3 2302 	umull	r2, r3, r3, r2
 8001c30:	095b      	lsrs	r3, r3, #5
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c38:	441c      	add	r4, r3
 8001c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001c44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001c48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001c4c:	4642      	mov	r2, r8
 8001c4e:	464b      	mov	r3, r9
 8001c50:	1891      	adds	r1, r2, r2
 8001c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8001c54:	415b      	adcs	r3, r3
 8001c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001c5c:	4641      	mov	r1, r8
 8001c5e:	1851      	adds	r1, r2, r1
 8001c60:	6339      	str	r1, [r7, #48]	; 0x30
 8001c62:	4649      	mov	r1, r9
 8001c64:	414b      	adcs	r3, r1
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001c74:	4659      	mov	r1, fp
 8001c76:	00cb      	lsls	r3, r1, #3
 8001c78:	4651      	mov	r1, sl
 8001c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c7e:	4651      	mov	r1, sl
 8001c80:	00ca      	lsls	r2, r1, #3
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	4642      	mov	r2, r8
 8001c8a:	189b      	adds	r3, r3, r2
 8001c8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c90:	464b      	mov	r3, r9
 8001c92:	460a      	mov	r2, r1
 8001c94:	eb42 0303 	adc.w	r3, r2, r3
 8001c98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ca8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001cac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	18db      	adds	r3, r3, r3
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	eb42 0303 	adc.w	r3, r2, r3
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001cc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001cc6:	f7fe fae3 	bl	8000290 <__aeabi_uldivmod>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <UART_SetConfig+0x2d4>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	095b      	lsrs	r3, r3, #5
 8001cd6:	2164      	movs	r1, #100	; 0x64
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	00db      	lsls	r3, r3, #3
 8001ce0:	3332      	adds	r3, #50	; 0x32
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <UART_SetConfig+0x2d4>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	f003 0207 	and.w	r2, r3, #7
 8001cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4422      	add	r2, r4
 8001cf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001cf8:	e106      	b.n	8001f08 <UART_SetConfig+0x4d8>
 8001cfa:	bf00      	nop
 8001cfc:	40011000 	.word	0x40011000
 8001d00:	40011400 	.word	0x40011400
 8001d04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001d1a:	4642      	mov	r2, r8
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	1891      	adds	r1, r2, r2
 8001d20:	6239      	str	r1, [r7, #32]
 8001d22:	415b      	adcs	r3, r3
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
 8001d26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d2a:	4641      	mov	r1, r8
 8001d2c:	1854      	adds	r4, r2, r1
 8001d2e:	4649      	mov	r1, r9
 8001d30:	eb43 0501 	adc.w	r5, r3, r1
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	f04f 0300 	mov.w	r3, #0
 8001d3c:	00eb      	lsls	r3, r5, #3
 8001d3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d42:	00e2      	lsls	r2, r4, #3
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	4643      	mov	r3, r8
 8001d4a:	18e3      	adds	r3, r4, r3
 8001d4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d50:	464b      	mov	r3, r9
 8001d52:	eb45 0303 	adc.w	r3, r5, r3
 8001d56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001d76:	4629      	mov	r1, r5
 8001d78:	008b      	lsls	r3, r1, #2
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d80:	4621      	mov	r1, r4
 8001d82:	008a      	lsls	r2, r1, #2
 8001d84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001d88:	f7fe fa82 	bl	8000290 <__aeabi_uldivmod>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4b60      	ldr	r3, [pc, #384]	; (8001f14 <UART_SetConfig+0x4e4>)
 8001d92:	fba3 2302 	umull	r2, r3, r3, r2
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	011c      	lsls	r4, r3, #4
 8001d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001da4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001da8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001dac:	4642      	mov	r2, r8
 8001dae:	464b      	mov	r3, r9
 8001db0:	1891      	adds	r1, r2, r2
 8001db2:	61b9      	str	r1, [r7, #24]
 8001db4:	415b      	adcs	r3, r3
 8001db6:	61fb      	str	r3, [r7, #28]
 8001db8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dbc:	4641      	mov	r1, r8
 8001dbe:	1851      	adds	r1, r2, r1
 8001dc0:	6139      	str	r1, [r7, #16]
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	414b      	adcs	r3, r1
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 0300 	mov.w	r3, #0
 8001dd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001dd4:	4659      	mov	r1, fp
 8001dd6:	00cb      	lsls	r3, r1, #3
 8001dd8:	4651      	mov	r1, sl
 8001dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001dde:	4651      	mov	r1, sl
 8001de0:	00ca      	lsls	r2, r1, #3
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	4603      	mov	r3, r0
 8001de8:	4642      	mov	r2, r8
 8001dea:	189b      	adds	r3, r3, r2
 8001dec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001df0:	464b      	mov	r3, r9
 8001df2:	460a      	mov	r2, r1
 8001df4:	eb42 0303 	adc.w	r3, r2, r3
 8001df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	67bb      	str	r3, [r7, #120]	; 0x78
 8001e06:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001e14:	4649      	mov	r1, r9
 8001e16:	008b      	lsls	r3, r1, #2
 8001e18:	4641      	mov	r1, r8
 8001e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e1e:	4641      	mov	r1, r8
 8001e20:	008a      	lsls	r2, r1, #2
 8001e22:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001e26:	f7fe fa33 	bl	8000290 <__aeabi_uldivmod>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <UART_SetConfig+0x4e4>)
 8001e32:	fba3 2301 	umull	r2, r3, r3, r1
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2264      	movs	r2, #100	; 0x64
 8001e3a:	fb02 f303 	mul.w	r3, r2, r3
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	011b      	lsls	r3, r3, #4
 8001e42:	3332      	adds	r3, #50	; 0x32
 8001e44:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <UART_SetConfig+0x4e4>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e50:	441c      	add	r4, r3
 8001e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e56:	2200      	movs	r2, #0
 8001e58:	673b      	str	r3, [r7, #112]	; 0x70
 8001e5a:	677a      	str	r2, [r7, #116]	; 0x74
 8001e5c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e60:	4642      	mov	r2, r8
 8001e62:	464b      	mov	r3, r9
 8001e64:	1891      	adds	r1, r2, r2
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	415b      	adcs	r3, r3
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e70:	4641      	mov	r1, r8
 8001e72:	1851      	adds	r1, r2, r1
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	4649      	mov	r1, r9
 8001e78:	414b      	adcs	r3, r1
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	f04f 0200 	mov.w	r2, #0
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001e88:	4659      	mov	r1, fp
 8001e8a:	00cb      	lsls	r3, r1, #3
 8001e8c:	4651      	mov	r1, sl
 8001e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e92:	4651      	mov	r1, sl
 8001e94:	00ca      	lsls	r2, r1, #3
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	189b      	adds	r3, r3, r2
 8001ea0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	460a      	mov	r2, r1
 8001ea6:	eb42 0303 	adc.w	r3, r2, r3
 8001eaa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	663b      	str	r3, [r7, #96]	; 0x60
 8001eb6:	667a      	str	r2, [r7, #100]	; 0x64
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001ec4:	4649      	mov	r1, r9
 8001ec6:	008b      	lsls	r3, r1, #2
 8001ec8:	4641      	mov	r1, r8
 8001eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ece:	4641      	mov	r1, r8
 8001ed0:	008a      	lsls	r2, r1, #2
 8001ed2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ed6:	f7fe f9db 	bl	8000290 <__aeabi_uldivmod>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <UART_SetConfig+0x4e4>)
 8001ee0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	2164      	movs	r1, #100	; 0x64
 8001ee8:	fb01 f303 	mul.w	r3, r1, r3
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	3332      	adds	r3, #50	; 0x32
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <UART_SetConfig+0x4e4>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4422      	add	r2, r4
 8001f06:	609a      	str	r2, [r3, #8]
}
 8001f08:	bf00      	nop
 8001f0a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f14:	51eb851f 	.word	0x51eb851f

08001f18 <findslot>:
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <findslot+0x2c>)
 8001f1a:	b510      	push	{r4, lr}
 8001f1c:	4604      	mov	r4, r0
 8001f1e:	6818      	ldr	r0, [r3, #0]
 8001f20:	b118      	cbz	r0, 8001f2a <findslot+0x12>
 8001f22:	6a03      	ldr	r3, [r0, #32]
 8001f24:	b90b      	cbnz	r3, 8001f2a <findslot+0x12>
 8001f26:	f000 fc91 	bl	800284c <__sinit>
 8001f2a:	2c13      	cmp	r4, #19
 8001f2c:	d807      	bhi.n	8001f3e <findslot+0x26>
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <findslot+0x30>)
 8001f30:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001f34:	3201      	adds	r2, #1
 8001f36:	d002      	beq.n	8001f3e <findslot+0x26>
 8001f38:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f3c:	bd10      	pop	{r4, pc}
 8001f3e:	2000      	movs	r0, #0
 8001f40:	e7fc      	b.n	8001f3c <findslot+0x24>
 8001f42:	bf00      	nop
 8001f44:	2000006c 	.word	0x2000006c
 8001f48:	200000e8 	.word	0x200000e8

08001f4c <error>:
 8001f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4e:	4604      	mov	r4, r0
 8001f50:	f001 f814 	bl	8002f7c <__errno>
 8001f54:	2613      	movs	r6, #19
 8001f56:	4605      	mov	r5, r0
 8001f58:	2700      	movs	r7, #0
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	4639      	mov	r1, r7
 8001f5e:	beab      	bkpt	0x00ab
 8001f60:	4606      	mov	r6, r0
 8001f62:	602e      	str	r6, [r5, #0]
 8001f64:	4620      	mov	r0, r4
 8001f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f68 <checkerror>:
 8001f68:	1c43      	adds	r3, r0, #1
 8001f6a:	d101      	bne.n	8001f70 <checkerror+0x8>
 8001f6c:	f7ff bfee 	b.w	8001f4c <error>
 8001f70:	4770      	bx	lr

08001f72 <_swiread>:
 8001f72:	b530      	push	{r4, r5, lr}
 8001f74:	b085      	sub	sp, #20
 8001f76:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f7a:	9203      	str	r2, [sp, #12]
 8001f7c:	2406      	movs	r4, #6
 8001f7e:	ad01      	add	r5, sp, #4
 8001f80:	4620      	mov	r0, r4
 8001f82:	4629      	mov	r1, r5
 8001f84:	beab      	bkpt	0x00ab
 8001f86:	4604      	mov	r4, r0
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff ffed 	bl	8001f68 <checkerror>
 8001f8e:	b005      	add	sp, #20
 8001f90:	bd30      	pop	{r4, r5, pc}

08001f92 <_read>:
 8001f92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f94:	4615      	mov	r5, r2
 8001f96:	9101      	str	r1, [sp, #4]
 8001f98:	f7ff ffbe 	bl	8001f18 <findslot>
 8001f9c:	9901      	ldr	r1, [sp, #4]
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	b938      	cbnz	r0, 8001fb2 <_read+0x20>
 8001fa2:	f000 ffeb 	bl	8002f7c <__errno>
 8001fa6:	2309      	movs	r3, #9
 8001fa8:	6003      	str	r3, [r0, #0]
 8001faa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fae:	b003      	add	sp, #12
 8001fb0:	bd30      	pop	{r4, r5, pc}
 8001fb2:	6800      	ldr	r0, [r0, #0]
 8001fb4:	462a      	mov	r2, r5
 8001fb6:	f7ff ffdc 	bl	8001f72 <_swiread>
 8001fba:	1c43      	adds	r3, r0, #1
 8001fbc:	d0f7      	beq.n	8001fae <_read+0x1c>
 8001fbe:	6863      	ldr	r3, [r4, #4]
 8001fc0:	1a2a      	subs	r2, r5, r0
 8001fc2:	4413      	add	r3, r2
 8001fc4:	6063      	str	r3, [r4, #4]
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	e7f1      	b.n	8001fae <_read+0x1c>

08001fca <_swilseek>:
 8001fca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001fcc:	460c      	mov	r4, r1
 8001fce:	4616      	mov	r6, r2
 8001fd0:	f7ff ffa2 	bl	8001f18 <findslot>
 8001fd4:	4605      	mov	r5, r0
 8001fd6:	b940      	cbnz	r0, 8001fea <_swilseek+0x20>
 8001fd8:	f000 ffd0 	bl	8002f7c <__errno>
 8001fdc:	2309      	movs	r3, #9
 8001fde:	6003      	str	r3, [r0, #0]
 8001fe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	b003      	add	sp, #12
 8001fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fea:	2e02      	cmp	r6, #2
 8001fec:	d903      	bls.n	8001ff6 <_swilseek+0x2c>
 8001fee:	f000 ffc5 	bl	8002f7c <__errno>
 8001ff2:	2316      	movs	r3, #22
 8001ff4:	e7f3      	b.n	8001fde <_swilseek+0x14>
 8001ff6:	2e01      	cmp	r6, #1
 8001ff8:	d112      	bne.n	8002020 <_swilseek+0x56>
 8001ffa:	6843      	ldr	r3, [r0, #4]
 8001ffc:	18e4      	adds	r4, r4, r3
 8001ffe:	d4f6      	bmi.n	8001fee <_swilseek+0x24>
 8002000:	682b      	ldr	r3, [r5, #0]
 8002002:	260a      	movs	r6, #10
 8002004:	e9cd 3400 	strd	r3, r4, [sp]
 8002008:	466f      	mov	r7, sp
 800200a:	4630      	mov	r0, r6
 800200c:	4639      	mov	r1, r7
 800200e:	beab      	bkpt	0x00ab
 8002010:	4606      	mov	r6, r0
 8002012:	4630      	mov	r0, r6
 8002014:	f7ff ffa8 	bl	8001f68 <checkerror>
 8002018:	2800      	cmp	r0, #0
 800201a:	dbe1      	blt.n	8001fe0 <_swilseek+0x16>
 800201c:	606c      	str	r4, [r5, #4]
 800201e:	e7e1      	b.n	8001fe4 <_swilseek+0x1a>
 8002020:	2e02      	cmp	r6, #2
 8002022:	6803      	ldr	r3, [r0, #0]
 8002024:	d1ec      	bne.n	8002000 <_swilseek+0x36>
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	260c      	movs	r6, #12
 800202a:	466f      	mov	r7, sp
 800202c:	4630      	mov	r0, r6
 800202e:	4639      	mov	r1, r7
 8002030:	beab      	bkpt	0x00ab
 8002032:	4606      	mov	r6, r0
 8002034:	4630      	mov	r0, r6
 8002036:	f7ff ff97 	bl	8001f68 <checkerror>
 800203a:	1c43      	adds	r3, r0, #1
 800203c:	d0d0      	beq.n	8001fe0 <_swilseek+0x16>
 800203e:	4404      	add	r4, r0
 8002040:	e7de      	b.n	8002000 <_swilseek+0x36>

08002042 <_lseek>:
 8002042:	f7ff bfc2 	b.w	8001fca <_swilseek>

08002046 <_swiwrite>:
 8002046:	b530      	push	{r4, r5, lr}
 8002048:	b085      	sub	sp, #20
 800204a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800204e:	9203      	str	r2, [sp, #12]
 8002050:	2405      	movs	r4, #5
 8002052:	ad01      	add	r5, sp, #4
 8002054:	4620      	mov	r0, r4
 8002056:	4629      	mov	r1, r5
 8002058:	beab      	bkpt	0x00ab
 800205a:	4604      	mov	r4, r0
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff ff83 	bl	8001f68 <checkerror>
 8002062:	b005      	add	sp, #20
 8002064:	bd30      	pop	{r4, r5, pc}

08002066 <_write>:
 8002066:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002068:	4615      	mov	r5, r2
 800206a:	9101      	str	r1, [sp, #4]
 800206c:	f7ff ff54 	bl	8001f18 <findslot>
 8002070:	9901      	ldr	r1, [sp, #4]
 8002072:	4604      	mov	r4, r0
 8002074:	b930      	cbnz	r0, 8002084 <_write+0x1e>
 8002076:	f000 ff81 	bl	8002f7c <__errno>
 800207a:	2309      	movs	r3, #9
 800207c:	6003      	str	r3, [r0, #0]
 800207e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002082:	e012      	b.n	80020aa <_write+0x44>
 8002084:	6800      	ldr	r0, [r0, #0]
 8002086:	462a      	mov	r2, r5
 8002088:	f7ff ffdd 	bl	8002046 <_swiwrite>
 800208c:	2800      	cmp	r0, #0
 800208e:	dbf6      	blt.n	800207e <_write+0x18>
 8002090:	6862      	ldr	r2, [r4, #4]
 8002092:	1a2b      	subs	r3, r5, r0
 8002094:	441a      	add	r2, r3
 8002096:	42a8      	cmp	r0, r5
 8002098:	6062      	str	r2, [r4, #4]
 800209a:	d105      	bne.n	80020a8 <_write+0x42>
 800209c:	2000      	movs	r0, #0
 800209e:	b003      	add	sp, #12
 80020a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020a4:	f7ff bf52 	b.w	8001f4c <error>
 80020a8:	4618      	mov	r0, r3
 80020aa:	b003      	add	sp, #12
 80020ac:	bd30      	pop	{r4, r5, pc}

080020ae <_swiclose>:
 80020ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020b0:	2402      	movs	r4, #2
 80020b2:	9001      	str	r0, [sp, #4]
 80020b4:	ad01      	add	r5, sp, #4
 80020b6:	4620      	mov	r0, r4
 80020b8:	4629      	mov	r1, r5
 80020ba:	beab      	bkpt	0x00ab
 80020bc:	4604      	mov	r4, r0
 80020be:	4620      	mov	r0, r4
 80020c0:	f7ff ff52 	bl	8001f68 <checkerror>
 80020c4:	b003      	add	sp, #12
 80020c6:	bd30      	pop	{r4, r5, pc}

080020c8 <_close>:
 80020c8:	b538      	push	{r3, r4, r5, lr}
 80020ca:	4605      	mov	r5, r0
 80020cc:	f7ff ff24 	bl	8001f18 <findslot>
 80020d0:	4604      	mov	r4, r0
 80020d2:	b930      	cbnz	r0, 80020e2 <_close+0x1a>
 80020d4:	f000 ff52 	bl	8002f7c <__errno>
 80020d8:	2309      	movs	r3, #9
 80020da:	6003      	str	r3, [r0, #0]
 80020dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e0:	bd38      	pop	{r3, r4, r5, pc}
 80020e2:	3d01      	subs	r5, #1
 80020e4:	2d01      	cmp	r5, #1
 80020e6:	d809      	bhi.n	80020fc <_close+0x34>
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <_close+0x48>)
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d104      	bne.n	80020fc <_close+0x34>
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020f6:	6003      	str	r3, [r0, #0]
 80020f8:	2000      	movs	r0, #0
 80020fa:	e7f1      	b.n	80020e0 <_close+0x18>
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	f7ff ffd6 	bl	80020ae <_swiclose>
 8002102:	2800      	cmp	r0, #0
 8002104:	d1ec      	bne.n	80020e0 <_close+0x18>
 8002106:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800210a:	6023      	str	r3, [r4, #0]
 800210c:	e7e8      	b.n	80020e0 <_close+0x18>
 800210e:	bf00      	nop
 8002110:	200000e8 	.word	0x200000e8

08002114 <_swistat>:
 8002114:	b570      	push	{r4, r5, r6, lr}
 8002116:	460c      	mov	r4, r1
 8002118:	f7ff fefe 	bl	8001f18 <findslot>
 800211c:	4605      	mov	r5, r0
 800211e:	b930      	cbnz	r0, 800212e <_swistat+0x1a>
 8002120:	f000 ff2c 	bl	8002f7c <__errno>
 8002124:	2309      	movs	r3, #9
 8002126:	6003      	str	r3, [r0, #0]
 8002128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800212c:	bd70      	pop	{r4, r5, r6, pc}
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002134:	6063      	str	r3, [r4, #4]
 8002136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213a:	64a3      	str	r3, [r4, #72]	; 0x48
 800213c:	260c      	movs	r6, #12
 800213e:	4630      	mov	r0, r6
 8002140:	4629      	mov	r1, r5
 8002142:	beab      	bkpt	0x00ab
 8002144:	4605      	mov	r5, r0
 8002146:	4628      	mov	r0, r5
 8002148:	f7ff ff0e 	bl	8001f68 <checkerror>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	bf1c      	itt	ne
 8002150:	6120      	strne	r0, [r4, #16]
 8002152:	2000      	movne	r0, #0
 8002154:	e7ea      	b.n	800212c <_swistat+0x18>

08002156 <_fstat>:
 8002156:	460b      	mov	r3, r1
 8002158:	b510      	push	{r4, lr}
 800215a:	2100      	movs	r1, #0
 800215c:	4604      	mov	r4, r0
 800215e:	2258      	movs	r2, #88	; 0x58
 8002160:	4618      	mov	r0, r3
 8002162:	f000 feab 	bl	8002ebc <memset>
 8002166:	4601      	mov	r1, r0
 8002168:	4620      	mov	r0, r4
 800216a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800216e:	f7ff bfd1 	b.w	8002114 <_swistat>

08002172 <_stat>:
 8002172:	b538      	push	{r3, r4, r5, lr}
 8002174:	460d      	mov	r5, r1
 8002176:	4604      	mov	r4, r0
 8002178:	2258      	movs	r2, #88	; 0x58
 800217a:	2100      	movs	r1, #0
 800217c:	4628      	mov	r0, r5
 800217e:	f000 fe9d 	bl	8002ebc <memset>
 8002182:	4620      	mov	r0, r4
 8002184:	2100      	movs	r1, #0
 8002186:	f000 f811 	bl	80021ac <_swiopen>
 800218a:	1c43      	adds	r3, r0, #1
 800218c:	4604      	mov	r4, r0
 800218e:	d00b      	beq.n	80021a8 <_stat+0x36>
 8002190:	686b      	ldr	r3, [r5, #4]
 8002192:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002196:	606b      	str	r3, [r5, #4]
 8002198:	4629      	mov	r1, r5
 800219a:	f7ff ffbb 	bl	8002114 <_swistat>
 800219e:	4605      	mov	r5, r0
 80021a0:	4620      	mov	r0, r4
 80021a2:	f7ff ff91 	bl	80020c8 <_close>
 80021a6:	462c      	mov	r4, r5
 80021a8:	4620      	mov	r0, r4
 80021aa:	bd38      	pop	{r3, r4, r5, pc}

080021ac <_swiopen>:
 80021ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021b0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800225c <_swiopen+0xb0>
 80021b4:	b097      	sub	sp, #92	; 0x5c
 80021b6:	4607      	mov	r7, r0
 80021b8:	460e      	mov	r6, r1
 80021ba:	2500      	movs	r5, #0
 80021bc:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 80021c0:	1c61      	adds	r1, r4, #1
 80021c2:	d037      	beq.n	8002234 <_swiopen+0x88>
 80021c4:	3501      	adds	r5, #1
 80021c6:	2d14      	cmp	r5, #20
 80021c8:	d1f8      	bne.n	80021bc <_swiopen+0x10>
 80021ca:	f000 fed7 	bl	8002f7c <__errno>
 80021ce:	2318      	movs	r3, #24
 80021d0:	6003      	str	r3, [r0, #0]
 80021d2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80021d6:	e03d      	b.n	8002254 <_swiopen+0xa8>
 80021d8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80021dc:	f240 6301 	movw	r3, #1537	; 0x601
 80021e0:	07b2      	lsls	r2, r6, #30
 80021e2:	bf48      	it	mi
 80021e4:	f044 0402 	orrmi.w	r4, r4, #2
 80021e8:	421e      	tst	r6, r3
 80021ea:	bf18      	it	ne
 80021ec:	f044 0404 	orrne.w	r4, r4, #4
 80021f0:	0733      	lsls	r3, r6, #28
 80021f2:	bf48      	it	mi
 80021f4:	f024 0404 	bicmi.w	r4, r4, #4
 80021f8:	4638      	mov	r0, r7
 80021fa:	bf48      	it	mi
 80021fc:	f044 0408 	orrmi.w	r4, r4, #8
 8002200:	9700      	str	r7, [sp, #0]
 8002202:	f7fd ffed 	bl	80001e0 <strlen>
 8002206:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800220a:	2401      	movs	r4, #1
 800220c:	4620      	mov	r0, r4
 800220e:	4649      	mov	r1, r9
 8002210:	beab      	bkpt	0x00ab
 8002212:	4604      	mov	r4, r0
 8002214:	2c00      	cmp	r4, #0
 8002216:	db08      	blt.n	800222a <_swiopen+0x7e>
 8002218:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800221c:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 8002220:	2300      	movs	r3, #0
 8002222:	f8c8 3004 	str.w	r3, [r8, #4]
 8002226:	462c      	mov	r4, r5
 8002228:	e014      	b.n	8002254 <_swiopen+0xa8>
 800222a:	4620      	mov	r0, r4
 800222c:	f7ff fe8e 	bl	8001f4c <error>
 8002230:	4604      	mov	r4, r0
 8002232:	e00f      	b.n	8002254 <_swiopen+0xa8>
 8002234:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002238:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800223c:	46e9      	mov	r9, sp
 800223e:	d1cb      	bne.n	80021d8 <_swiopen+0x2c>
 8002240:	4649      	mov	r1, r9
 8002242:	4638      	mov	r0, r7
 8002244:	f7ff ff95 	bl	8002172 <_stat>
 8002248:	3001      	adds	r0, #1
 800224a:	d0c5      	beq.n	80021d8 <_swiopen+0x2c>
 800224c:	f000 fe96 	bl	8002f7c <__errno>
 8002250:	2311      	movs	r3, #17
 8002252:	6003      	str	r3, [r0, #0]
 8002254:	4620      	mov	r0, r4
 8002256:	b017      	add	sp, #92	; 0x5c
 8002258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800225c:	200000e8 	.word	0x200000e8

08002260 <_open>:
 8002260:	b40e      	push	{r1, r2, r3}
 8002262:	b500      	push	{lr}
 8002264:	9901      	ldr	r1, [sp, #4]
 8002266:	f7ff ffa1 	bl	80021ac <_swiopen>
 800226a:	f85d eb04 	ldr.w	lr, [sp], #4
 800226e:	b003      	add	sp, #12
 8002270:	4770      	bx	lr
	...

08002274 <_get_semihosting_exts>:
 8002274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002278:	4606      	mov	r6, r0
 800227a:	460f      	mov	r7, r1
 800227c:	482a      	ldr	r0, [pc, #168]	; (8002328 <_get_semihosting_exts+0xb4>)
 800227e:	2100      	movs	r1, #0
 8002280:	4615      	mov	r5, r2
 8002282:	f7ff ff93 	bl	80021ac <_swiopen>
 8002286:	462a      	mov	r2, r5
 8002288:	4604      	mov	r4, r0
 800228a:	2100      	movs	r1, #0
 800228c:	4630      	mov	r0, r6
 800228e:	f000 fe15 	bl	8002ebc <memset>
 8002292:	1c63      	adds	r3, r4, #1
 8002294:	d016      	beq.n	80022c4 <_get_semihosting_exts+0x50>
 8002296:	4620      	mov	r0, r4
 8002298:	f7ff fe3e 	bl	8001f18 <findslot>
 800229c:	f04f 080c 	mov.w	r8, #12
 80022a0:	4681      	mov	r9, r0
 80022a2:	4640      	mov	r0, r8
 80022a4:	4649      	mov	r1, r9
 80022a6:	beab      	bkpt	0x00ab
 80022a8:	4680      	mov	r8, r0
 80022aa:	4640      	mov	r0, r8
 80022ac:	f7ff fe5c 	bl	8001f68 <checkerror>
 80022b0:	2803      	cmp	r0, #3
 80022b2:	dd02      	ble.n	80022ba <_get_semihosting_exts+0x46>
 80022b4:	1ec3      	subs	r3, r0, #3
 80022b6:	42ab      	cmp	r3, r5
 80022b8:	dc08      	bgt.n	80022cc <_get_semihosting_exts+0x58>
 80022ba:	4620      	mov	r0, r4
 80022bc:	f7ff ff04 	bl	80020c8 <_close>
 80022c0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022c4:	4620      	mov	r0, r4
 80022c6:	b003      	add	sp, #12
 80022c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022cc:	2204      	movs	r2, #4
 80022ce:	eb0d 0102 	add.w	r1, sp, r2
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff fe5d 	bl	8001f92 <_read>
 80022d8:	2803      	cmp	r0, #3
 80022da:	ddee      	ble.n	80022ba <_get_semihosting_exts+0x46>
 80022dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022e0:	2b53      	cmp	r3, #83	; 0x53
 80022e2:	d1ea      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022e4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80022e8:	2b48      	cmp	r3, #72	; 0x48
 80022ea:	d1e6      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022ec:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80022f0:	2b46      	cmp	r3, #70	; 0x46
 80022f2:	d1e2      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022f8:	2b42      	cmp	r3, #66	; 0x42
 80022fa:	d1de      	bne.n	80022ba <_get_semihosting_exts+0x46>
 80022fc:	2201      	movs	r2, #1
 80022fe:	4639      	mov	r1, r7
 8002300:	4620      	mov	r0, r4
 8002302:	f7ff fe62 	bl	8001fca <_swilseek>
 8002306:	2800      	cmp	r0, #0
 8002308:	dbd7      	blt.n	80022ba <_get_semihosting_exts+0x46>
 800230a:	462a      	mov	r2, r5
 800230c:	4631      	mov	r1, r6
 800230e:	4620      	mov	r0, r4
 8002310:	f7ff fe3f 	bl	8001f92 <_read>
 8002314:	4605      	mov	r5, r0
 8002316:	4620      	mov	r0, r4
 8002318:	f7ff fed6 	bl	80020c8 <_close>
 800231c:	4628      	mov	r0, r5
 800231e:	f7ff fe23 	bl	8001f68 <checkerror>
 8002322:	4604      	mov	r4, r0
 8002324:	e7ce      	b.n	80022c4 <_get_semihosting_exts+0x50>
 8002326:	bf00      	nop
 8002328:	08003b20 	.word	0x08003b20

0800232c <initialise_semihosting_exts>:
 800232c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800232e:	4d0a      	ldr	r5, [pc, #40]	; (8002358 <initialise_semihosting_exts+0x2c>)
 8002330:	4c0a      	ldr	r4, [pc, #40]	; (800235c <initialise_semihosting_exts+0x30>)
 8002332:	2100      	movs	r1, #0
 8002334:	2201      	movs	r2, #1
 8002336:	a801      	add	r0, sp, #4
 8002338:	6029      	str	r1, [r5, #0]
 800233a:	6022      	str	r2, [r4, #0]
 800233c:	f7ff ff9a 	bl	8002274 <_get_semihosting_exts>
 8002340:	2800      	cmp	r0, #0
 8002342:	dd07      	ble.n	8002354 <initialise_semihosting_exts+0x28>
 8002344:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002348:	f003 0201 	and.w	r2, r3, #1
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	602a      	str	r2, [r5, #0]
 8002352:	6023      	str	r3, [r4, #0]
 8002354:	b003      	add	sp, #12
 8002356:	bd30      	pop	{r4, r5, pc}
 8002358:	2000000c 	.word	0x2000000c
 800235c:	20000010 	.word	0x20000010

08002360 <_has_ext_stdout_stderr>:
 8002360:	b510      	push	{r4, lr}
 8002362:	4c04      	ldr	r4, [pc, #16]	; (8002374 <_has_ext_stdout_stderr+0x14>)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	da01      	bge.n	800236e <_has_ext_stdout_stderr+0xe>
 800236a:	f7ff ffdf 	bl	800232c <initialise_semihosting_exts>
 800236e:	6820      	ldr	r0, [r4, #0]
 8002370:	bd10      	pop	{r4, pc}
 8002372:	bf00      	nop
 8002374:	20000010 	.word	0x20000010

08002378 <initialise_monitor_handles>:
 8002378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800237c:	b085      	sub	sp, #20
 800237e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002430 <initialise_monitor_handles+0xb8>
 8002382:	f8cd 9004 	str.w	r9, [sp, #4]
 8002386:	2303      	movs	r3, #3
 8002388:	2400      	movs	r4, #0
 800238a:	9303      	str	r3, [sp, #12]
 800238c:	af01      	add	r7, sp, #4
 800238e:	9402      	str	r4, [sp, #8]
 8002390:	2501      	movs	r5, #1
 8002392:	4628      	mov	r0, r5
 8002394:	4639      	mov	r1, r7
 8002396:	beab      	bkpt	0x00ab
 8002398:	4605      	mov	r5, r0
 800239a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8002434 <initialise_monitor_handles+0xbc>
 800239e:	4623      	mov	r3, r4
 80023a0:	4c20      	ldr	r4, [pc, #128]	; (8002424 <initialise_monitor_handles+0xac>)
 80023a2:	f8c8 5000 	str.w	r5, [r8]
 80023a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023aa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80023ae:	3301      	adds	r3, #1
 80023b0:	2b14      	cmp	r3, #20
 80023b2:	d1fa      	bne.n	80023aa <initialise_monitor_handles+0x32>
 80023b4:	f7ff ffd4 	bl	8002360 <_has_ext_stdout_stderr>
 80023b8:	4d1b      	ldr	r5, [pc, #108]	; (8002428 <initialise_monitor_handles+0xb0>)
 80023ba:	b1d0      	cbz	r0, 80023f2 <initialise_monitor_handles+0x7a>
 80023bc:	f04f 0a03 	mov.w	sl, #3
 80023c0:	2304      	movs	r3, #4
 80023c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80023c6:	2601      	movs	r6, #1
 80023c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80023cc:	9302      	str	r3, [sp, #8]
 80023ce:	4630      	mov	r0, r6
 80023d0:	4639      	mov	r1, r7
 80023d2:	beab      	bkpt	0x00ab
 80023d4:	4683      	mov	fp, r0
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <initialise_monitor_handles+0xb4>)
 80023d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80023dc:	f8c3 b000 	str.w	fp, [r3]
 80023e0:	2308      	movs	r3, #8
 80023e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80023e6:	9302      	str	r3, [sp, #8]
 80023e8:	4630      	mov	r0, r6
 80023ea:	4639      	mov	r1, r7
 80023ec:	beab      	bkpt	0x00ab
 80023ee:	4606      	mov	r6, r0
 80023f0:	602e      	str	r6, [r5, #0]
 80023f2:	682b      	ldr	r3, [r5, #0]
 80023f4:	3301      	adds	r3, #1
 80023f6:	bf02      	ittt	eq
 80023f8:	4b0c      	ldreq	r3, [pc, #48]	; (800242c <initialise_monitor_handles+0xb4>)
 80023fa:	681b      	ldreq	r3, [r3, #0]
 80023fc:	602b      	streq	r3, [r5, #0]
 80023fe:	2600      	movs	r6, #0
 8002400:	f8d8 3000 	ldr.w	r3, [r8]
 8002404:	6023      	str	r3, [r4, #0]
 8002406:	6066      	str	r6, [r4, #4]
 8002408:	f7ff ffaa 	bl	8002360 <_has_ext_stdout_stderr>
 800240c:	b130      	cbz	r0, 800241c <initialise_monitor_handles+0xa4>
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <initialise_monitor_handles+0xb4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002416:	682b      	ldr	r3, [r5, #0]
 8002418:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800241c:	b005      	add	sp, #20
 800241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002422:	bf00      	nop
 8002424:	200000e8 	.word	0x200000e8
 8002428:	200000dc 	.word	0x200000dc
 800242c:	200000e4 	.word	0x200000e4
 8002430:	08003b36 	.word	0x08003b36
 8002434:	200000e0 	.word	0x200000e0

08002438 <_isatty>:
 8002438:	b570      	push	{r4, r5, r6, lr}
 800243a:	f7ff fd6d 	bl	8001f18 <findslot>
 800243e:	2509      	movs	r5, #9
 8002440:	4604      	mov	r4, r0
 8002442:	b920      	cbnz	r0, 800244e <_isatty+0x16>
 8002444:	f000 fd9a 	bl	8002f7c <__errno>
 8002448:	6005      	str	r5, [r0, #0]
 800244a:	4620      	mov	r0, r4
 800244c:	bd70      	pop	{r4, r5, r6, pc}
 800244e:	4628      	mov	r0, r5
 8002450:	4621      	mov	r1, r4
 8002452:	beab      	bkpt	0x00ab
 8002454:	4604      	mov	r4, r0
 8002456:	2c01      	cmp	r4, #1
 8002458:	d0f7      	beq.n	800244a <_isatty+0x12>
 800245a:	f000 fd8f 	bl	8002f7c <__errno>
 800245e:	2400      	movs	r4, #0
 8002460:	4605      	mov	r5, r0
 8002462:	2613      	movs	r6, #19
 8002464:	4630      	mov	r0, r6
 8002466:	4621      	mov	r1, r4
 8002468:	beab      	bkpt	0x00ab
 800246a:	4606      	mov	r6, r0
 800246c:	602e      	str	r6, [r5, #0]
 800246e:	e7ec      	b.n	800244a <_isatty+0x12>

08002470 <_fclose_r>:
 8002470:	b570      	push	{r4, r5, r6, lr}
 8002472:	4606      	mov	r6, r0
 8002474:	460c      	mov	r4, r1
 8002476:	b911      	cbnz	r1, 800247e <_fclose_r+0xe>
 8002478:	2500      	movs	r5, #0
 800247a:	4628      	mov	r0, r5
 800247c:	bd70      	pop	{r4, r5, r6, pc}
 800247e:	b118      	cbz	r0, 8002488 <_fclose_r+0x18>
 8002480:	6a03      	ldr	r3, [r0, #32]
 8002482:	b90b      	cbnz	r3, 8002488 <_fclose_r+0x18>
 8002484:	f000 f9e2 	bl	800284c <__sinit>
 8002488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800248a:	07d8      	lsls	r0, r3, #31
 800248c:	d405      	bmi.n	800249a <_fclose_r+0x2a>
 800248e:	89a3      	ldrh	r3, [r4, #12]
 8002490:	0599      	lsls	r1, r3, #22
 8002492:	d402      	bmi.n	800249a <_fclose_r+0x2a>
 8002494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002496:	f000 fd9d 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 800249a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800249e:	b93b      	cbnz	r3, 80024b0 <_fclose_r+0x40>
 80024a0:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80024a2:	f015 0501 	ands.w	r5, r5, #1
 80024a6:	d1e7      	bne.n	8002478 <_fclose_r+0x8>
 80024a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80024aa:	f000 fd94 	bl	8002fd6 <__retarget_lock_release_recursive>
 80024ae:	e7e4      	b.n	800247a <_fclose_r+0xa>
 80024b0:	4621      	mov	r1, r4
 80024b2:	4630      	mov	r0, r6
 80024b4:	f000 f83c 	bl	8002530 <__sflush_r>
 80024b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024ba:	4605      	mov	r5, r0
 80024bc:	b133      	cbz	r3, 80024cc <_fclose_r+0x5c>
 80024be:	6a21      	ldr	r1, [r4, #32]
 80024c0:	4630      	mov	r0, r6
 80024c2:	4798      	blx	r3
 80024c4:	2800      	cmp	r0, #0
 80024c6:	bfb8      	it	lt
 80024c8:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80024cc:	89a3      	ldrh	r3, [r4, #12]
 80024ce:	061a      	lsls	r2, r3, #24
 80024d0:	d503      	bpl.n	80024da <_fclose_r+0x6a>
 80024d2:	6921      	ldr	r1, [r4, #16]
 80024d4:	4630      	mov	r0, r6
 80024d6:	f000 fd7f 	bl	8002fd8 <_free_r>
 80024da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80024dc:	b141      	cbz	r1, 80024f0 <_fclose_r+0x80>
 80024de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80024e2:	4299      	cmp	r1, r3
 80024e4:	d002      	beq.n	80024ec <_fclose_r+0x7c>
 80024e6:	4630      	mov	r0, r6
 80024e8:	f000 fd76 	bl	8002fd8 <_free_r>
 80024ec:	2300      	movs	r3, #0
 80024ee:	6363      	str	r3, [r4, #52]	; 0x34
 80024f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80024f2:	b121      	cbz	r1, 80024fe <_fclose_r+0x8e>
 80024f4:	4630      	mov	r0, r6
 80024f6:	f000 fd6f 	bl	8002fd8 <_free_r>
 80024fa:	2300      	movs	r3, #0
 80024fc:	64a3      	str	r3, [r4, #72]	; 0x48
 80024fe:	f000 f945 	bl	800278c <__sfp_lock_acquire>
 8002502:	2300      	movs	r3, #0
 8002504:	81a3      	strh	r3, [r4, #12]
 8002506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002508:	07db      	lsls	r3, r3, #31
 800250a:	d402      	bmi.n	8002512 <_fclose_r+0xa2>
 800250c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800250e:	f000 fd62 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002512:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002514:	f000 fd5d 	bl	8002fd2 <__retarget_lock_close_recursive>
 8002518:	f000 f93e 	bl	8002798 <__sfp_lock_release>
 800251c:	e7ad      	b.n	800247a <_fclose_r+0xa>
	...

08002520 <fclose>:
 8002520:	4b02      	ldr	r3, [pc, #8]	; (800252c <fclose+0xc>)
 8002522:	4601      	mov	r1, r0
 8002524:	6818      	ldr	r0, [r3, #0]
 8002526:	f7ff bfa3 	b.w	8002470 <_fclose_r>
 800252a:	bf00      	nop
 800252c:	2000006c 	.word	0x2000006c

08002530 <__sflush_r>:
 8002530:	898a      	ldrh	r2, [r1, #12]
 8002532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002536:	4605      	mov	r5, r0
 8002538:	0710      	lsls	r0, r2, #28
 800253a:	460c      	mov	r4, r1
 800253c:	d458      	bmi.n	80025f0 <__sflush_r+0xc0>
 800253e:	684b      	ldr	r3, [r1, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	dc05      	bgt.n	8002550 <__sflush_r+0x20>
 8002544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002546:	2b00      	cmp	r3, #0
 8002548:	dc02      	bgt.n	8002550 <__sflush_r+0x20>
 800254a:	2000      	movs	r0, #0
 800254c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002552:	2e00      	cmp	r6, #0
 8002554:	d0f9      	beq.n	800254a <__sflush_r+0x1a>
 8002556:	2300      	movs	r3, #0
 8002558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800255c:	682f      	ldr	r7, [r5, #0]
 800255e:	6a21      	ldr	r1, [r4, #32]
 8002560:	602b      	str	r3, [r5, #0]
 8002562:	d032      	beq.n	80025ca <__sflush_r+0x9a>
 8002564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002566:	89a3      	ldrh	r3, [r4, #12]
 8002568:	075a      	lsls	r2, r3, #29
 800256a:	d505      	bpl.n	8002578 <__sflush_r+0x48>
 800256c:	6863      	ldr	r3, [r4, #4]
 800256e:	1ac0      	subs	r0, r0, r3
 8002570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002572:	b10b      	cbz	r3, 8002578 <__sflush_r+0x48>
 8002574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002576:	1ac0      	subs	r0, r0, r3
 8002578:	2300      	movs	r3, #0
 800257a:	4602      	mov	r2, r0
 800257c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800257e:	6a21      	ldr	r1, [r4, #32]
 8002580:	4628      	mov	r0, r5
 8002582:	47b0      	blx	r6
 8002584:	1c43      	adds	r3, r0, #1
 8002586:	89a3      	ldrh	r3, [r4, #12]
 8002588:	d106      	bne.n	8002598 <__sflush_r+0x68>
 800258a:	6829      	ldr	r1, [r5, #0]
 800258c:	291d      	cmp	r1, #29
 800258e:	d82b      	bhi.n	80025e8 <__sflush_r+0xb8>
 8002590:	4a29      	ldr	r2, [pc, #164]	; (8002638 <__sflush_r+0x108>)
 8002592:	410a      	asrs	r2, r1
 8002594:	07d6      	lsls	r6, r2, #31
 8002596:	d427      	bmi.n	80025e8 <__sflush_r+0xb8>
 8002598:	2200      	movs	r2, #0
 800259a:	6062      	str	r2, [r4, #4]
 800259c:	04d9      	lsls	r1, r3, #19
 800259e:	6922      	ldr	r2, [r4, #16]
 80025a0:	6022      	str	r2, [r4, #0]
 80025a2:	d504      	bpl.n	80025ae <__sflush_r+0x7e>
 80025a4:	1c42      	adds	r2, r0, #1
 80025a6:	d101      	bne.n	80025ac <__sflush_r+0x7c>
 80025a8:	682b      	ldr	r3, [r5, #0]
 80025aa:	b903      	cbnz	r3, 80025ae <__sflush_r+0x7e>
 80025ac:	6560      	str	r0, [r4, #84]	; 0x54
 80025ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80025b0:	602f      	str	r7, [r5, #0]
 80025b2:	2900      	cmp	r1, #0
 80025b4:	d0c9      	beq.n	800254a <__sflush_r+0x1a>
 80025b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80025ba:	4299      	cmp	r1, r3
 80025bc:	d002      	beq.n	80025c4 <__sflush_r+0x94>
 80025be:	4628      	mov	r0, r5
 80025c0:	f000 fd0a 	bl	8002fd8 <_free_r>
 80025c4:	2000      	movs	r0, #0
 80025c6:	6360      	str	r0, [r4, #52]	; 0x34
 80025c8:	e7c0      	b.n	800254c <__sflush_r+0x1c>
 80025ca:	2301      	movs	r3, #1
 80025cc:	4628      	mov	r0, r5
 80025ce:	47b0      	blx	r6
 80025d0:	1c41      	adds	r1, r0, #1
 80025d2:	d1c8      	bne.n	8002566 <__sflush_r+0x36>
 80025d4:	682b      	ldr	r3, [r5, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0c5      	beq.n	8002566 <__sflush_r+0x36>
 80025da:	2b1d      	cmp	r3, #29
 80025dc:	d001      	beq.n	80025e2 <__sflush_r+0xb2>
 80025de:	2b16      	cmp	r3, #22
 80025e0:	d101      	bne.n	80025e6 <__sflush_r+0xb6>
 80025e2:	602f      	str	r7, [r5, #0]
 80025e4:	e7b1      	b.n	800254a <__sflush_r+0x1a>
 80025e6:	89a3      	ldrh	r3, [r4, #12]
 80025e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ec:	81a3      	strh	r3, [r4, #12]
 80025ee:	e7ad      	b.n	800254c <__sflush_r+0x1c>
 80025f0:	690f      	ldr	r7, [r1, #16]
 80025f2:	2f00      	cmp	r7, #0
 80025f4:	d0a9      	beq.n	800254a <__sflush_r+0x1a>
 80025f6:	0793      	lsls	r3, r2, #30
 80025f8:	680e      	ldr	r6, [r1, #0]
 80025fa:	bf08      	it	eq
 80025fc:	694b      	ldreq	r3, [r1, #20]
 80025fe:	600f      	str	r7, [r1, #0]
 8002600:	bf18      	it	ne
 8002602:	2300      	movne	r3, #0
 8002604:	eba6 0807 	sub.w	r8, r6, r7
 8002608:	608b      	str	r3, [r1, #8]
 800260a:	f1b8 0f00 	cmp.w	r8, #0
 800260e:	dd9c      	ble.n	800254a <__sflush_r+0x1a>
 8002610:	6a21      	ldr	r1, [r4, #32]
 8002612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002614:	4643      	mov	r3, r8
 8002616:	463a      	mov	r2, r7
 8002618:	4628      	mov	r0, r5
 800261a:	47b0      	blx	r6
 800261c:	2800      	cmp	r0, #0
 800261e:	dc06      	bgt.n	800262e <__sflush_r+0xfe>
 8002620:	89a3      	ldrh	r3, [r4, #12]
 8002622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002626:	81a3      	strh	r3, [r4, #12]
 8002628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800262c:	e78e      	b.n	800254c <__sflush_r+0x1c>
 800262e:	4407      	add	r7, r0
 8002630:	eba8 0800 	sub.w	r8, r8, r0
 8002634:	e7e9      	b.n	800260a <__sflush_r+0xda>
 8002636:	bf00      	nop
 8002638:	dfbffffe 	.word	0xdfbffffe

0800263c <_fflush_r>:
 800263c:	b538      	push	{r3, r4, r5, lr}
 800263e:	690b      	ldr	r3, [r1, #16]
 8002640:	4605      	mov	r5, r0
 8002642:	460c      	mov	r4, r1
 8002644:	b913      	cbnz	r3, 800264c <_fflush_r+0x10>
 8002646:	2500      	movs	r5, #0
 8002648:	4628      	mov	r0, r5
 800264a:	bd38      	pop	{r3, r4, r5, pc}
 800264c:	b118      	cbz	r0, 8002656 <_fflush_r+0x1a>
 800264e:	6a03      	ldr	r3, [r0, #32]
 8002650:	b90b      	cbnz	r3, 8002656 <_fflush_r+0x1a>
 8002652:	f000 f8fb 	bl	800284c <__sinit>
 8002656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f3      	beq.n	8002646 <_fflush_r+0xa>
 800265e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002660:	07d0      	lsls	r0, r2, #31
 8002662:	d404      	bmi.n	800266e <_fflush_r+0x32>
 8002664:	0599      	lsls	r1, r3, #22
 8002666:	d402      	bmi.n	800266e <_fflush_r+0x32>
 8002668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800266a:	f000 fcb3 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 800266e:	4628      	mov	r0, r5
 8002670:	4621      	mov	r1, r4
 8002672:	f7ff ff5d 	bl	8002530 <__sflush_r>
 8002676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002678:	07da      	lsls	r2, r3, #31
 800267a:	4605      	mov	r5, r0
 800267c:	d4e4      	bmi.n	8002648 <_fflush_r+0xc>
 800267e:	89a3      	ldrh	r3, [r4, #12]
 8002680:	059b      	lsls	r3, r3, #22
 8002682:	d4e1      	bmi.n	8002648 <_fflush_r+0xc>
 8002684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002686:	f000 fca6 	bl	8002fd6 <__retarget_lock_release_recursive>
 800268a:	e7dd      	b.n	8002648 <_fflush_r+0xc>

0800268c <std>:
 800268c:	2300      	movs	r3, #0
 800268e:	b510      	push	{r4, lr}
 8002690:	4604      	mov	r4, r0
 8002692:	e9c0 3300 	strd	r3, r3, [r0]
 8002696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800269a:	6083      	str	r3, [r0, #8]
 800269c:	8181      	strh	r1, [r0, #12]
 800269e:	6643      	str	r3, [r0, #100]	; 0x64
 80026a0:	81c2      	strh	r2, [r0, #14]
 80026a2:	6183      	str	r3, [r0, #24]
 80026a4:	4619      	mov	r1, r3
 80026a6:	2208      	movs	r2, #8
 80026a8:	305c      	adds	r0, #92	; 0x5c
 80026aa:	f000 fc07 	bl	8002ebc <memset>
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <std+0x58>)
 80026b0:	6263      	str	r3, [r4, #36]	; 0x24
 80026b2:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <std+0x5c>)
 80026b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80026b6:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <std+0x60>)
 80026b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80026ba:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <std+0x64>)
 80026bc:	6323      	str	r3, [r4, #48]	; 0x30
 80026be:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <std+0x68>)
 80026c0:	6224      	str	r4, [r4, #32]
 80026c2:	429c      	cmp	r4, r3
 80026c4:	d006      	beq.n	80026d4 <std+0x48>
 80026c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80026ca:	4294      	cmp	r4, r2
 80026cc:	d002      	beq.n	80026d4 <std+0x48>
 80026ce:	33d0      	adds	r3, #208	; 0xd0
 80026d0:	429c      	cmp	r4, r3
 80026d2:	d105      	bne.n	80026e0 <std+0x54>
 80026d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80026d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026dc:	f000 bc78 	b.w	8002fd0 <__retarget_lock_init_recursive>
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	bf00      	nop
 80026e4:	08002bcd 	.word	0x08002bcd
 80026e8:	08002bef 	.word	0x08002bef
 80026ec:	08002c27 	.word	0x08002c27
 80026f0:	08002c4b 	.word	0x08002c4b
 80026f4:	20000188 	.word	0x20000188

080026f8 <stdio_exit_handler>:
 80026f8:	4a02      	ldr	r2, [pc, #8]	; (8002704 <stdio_exit_handler+0xc>)
 80026fa:	4903      	ldr	r1, [pc, #12]	; (8002708 <stdio_exit_handler+0x10>)
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <stdio_exit_handler+0x14>)
 80026fe:	f000 b975 	b.w	80029ec <_fwalk_sglue>
 8002702:	bf00      	nop
 8002704:	20000014 	.word	0x20000014
 8002708:	0800263d 	.word	0x0800263d
 800270c:	20000020 	.word	0x20000020

08002710 <cleanup_stdio>:
 8002710:	6841      	ldr	r1, [r0, #4]
 8002712:	4b0c      	ldr	r3, [pc, #48]	; (8002744 <cleanup_stdio+0x34>)
 8002714:	4299      	cmp	r1, r3
 8002716:	b510      	push	{r4, lr}
 8002718:	4604      	mov	r4, r0
 800271a:	d001      	beq.n	8002720 <cleanup_stdio+0x10>
 800271c:	f7ff ff8e 	bl	800263c <_fflush_r>
 8002720:	68a1      	ldr	r1, [r4, #8]
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <cleanup_stdio+0x38>)
 8002724:	4299      	cmp	r1, r3
 8002726:	d002      	beq.n	800272e <cleanup_stdio+0x1e>
 8002728:	4620      	mov	r0, r4
 800272a:	f7ff ff87 	bl	800263c <_fflush_r>
 800272e:	68e1      	ldr	r1, [r4, #12]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <cleanup_stdio+0x3c>)
 8002732:	4299      	cmp	r1, r3
 8002734:	d004      	beq.n	8002740 <cleanup_stdio+0x30>
 8002736:	4620      	mov	r0, r4
 8002738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800273c:	f7ff bf7e 	b.w	800263c <_fflush_r>
 8002740:	bd10      	pop	{r4, pc}
 8002742:	bf00      	nop
 8002744:	20000188 	.word	0x20000188
 8002748:	200001f0 	.word	0x200001f0
 800274c:	20000258 	.word	0x20000258

08002750 <global_stdio_init.part.0>:
 8002750:	b510      	push	{r4, lr}
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <global_stdio_init.part.0+0x30>)
 8002754:	4c0b      	ldr	r4, [pc, #44]	; (8002784 <global_stdio_init.part.0+0x34>)
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <global_stdio_init.part.0+0x38>)
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	4620      	mov	r0, r4
 800275c:	2200      	movs	r2, #0
 800275e:	2104      	movs	r1, #4
 8002760:	f7ff ff94 	bl	800268c <std>
 8002764:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002768:	2201      	movs	r2, #1
 800276a:	2109      	movs	r1, #9
 800276c:	f7ff ff8e 	bl	800268c <std>
 8002770:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002774:	2202      	movs	r2, #2
 8002776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800277a:	2112      	movs	r1, #18
 800277c:	f7ff bf86 	b.w	800268c <std>
 8002780:	200002c0 	.word	0x200002c0
 8002784:	20000188 	.word	0x20000188
 8002788:	080026f9 	.word	0x080026f9

0800278c <__sfp_lock_acquire>:
 800278c:	4801      	ldr	r0, [pc, #4]	; (8002794 <__sfp_lock_acquire+0x8>)
 800278e:	f000 bc21 	b.w	8002fd4 <__retarget_lock_acquire_recursive>
 8002792:	bf00      	nop
 8002794:	200002c9 	.word	0x200002c9

08002798 <__sfp_lock_release>:
 8002798:	4801      	ldr	r0, [pc, #4]	; (80027a0 <__sfp_lock_release+0x8>)
 800279a:	f000 bc1c 	b.w	8002fd6 <__retarget_lock_release_recursive>
 800279e:	bf00      	nop
 80027a0:	200002c9 	.word	0x200002c9

080027a4 <__sfp>:
 80027a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027a8:	4607      	mov	r7, r0
 80027aa:	f7ff ffef 	bl	800278c <__sfp_lock_acquire>
 80027ae:	4b24      	ldr	r3, [pc, #144]	; (8002840 <__sfp+0x9c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b90b      	cbnz	r3, 80027b8 <__sfp+0x14>
 80027b4:	f7ff ffcc 	bl	8002750 <global_stdio_init.part.0>
 80027b8:	4e22      	ldr	r6, [pc, #136]	; (8002844 <__sfp+0xa0>)
 80027ba:	f04f 0804 	mov.w	r8, #4
 80027be:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	d50f      	bpl.n	80027e6 <__sfp+0x42>
 80027c6:	6835      	ldr	r5, [r6, #0]
 80027c8:	2d00      	cmp	r5, #0
 80027ca:	d137      	bne.n	800283c <__sfp+0x98>
 80027cc:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 80027d0:	4638      	mov	r0, r7
 80027d2:	f000 fc6d 	bl	80030b0 <_malloc_r>
 80027d6:	4604      	mov	r4, r0
 80027d8:	bb30      	cbnz	r0, 8002828 <__sfp+0x84>
 80027da:	6030      	str	r0, [r6, #0]
 80027dc:	f7ff ffdc 	bl	8002798 <__sfp_lock_release>
 80027e0:	230c      	movs	r3, #12
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	e01b      	b.n	800281e <__sfp+0x7a>
 80027e6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80027ea:	b9dd      	cbnz	r5, 8002824 <__sfp+0x80>
 80027ec:	4b16      	ldr	r3, [pc, #88]	; (8002848 <__sfp+0xa4>)
 80027ee:	60e3      	str	r3, [r4, #12]
 80027f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80027f4:	6665      	str	r5, [r4, #100]	; 0x64
 80027f6:	f000 fbeb 	bl	8002fd0 <__retarget_lock_init_recursive>
 80027fa:	f7ff ffcd 	bl	8002798 <__sfp_lock_release>
 80027fe:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002802:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002806:	6025      	str	r5, [r4, #0]
 8002808:	61a5      	str	r5, [r4, #24]
 800280a:	2208      	movs	r2, #8
 800280c:	4629      	mov	r1, r5
 800280e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002812:	f000 fb53 	bl	8002ebc <memset>
 8002816:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800281a:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800281e:	4620      	mov	r0, r4
 8002820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002824:	3468      	adds	r4, #104	; 0x68
 8002826:	e7cc      	b.n	80027c2 <__sfp+0x1e>
 8002828:	e9c0 5800 	strd	r5, r8, [r0]
 800282c:	300c      	adds	r0, #12
 800282e:	60a0      	str	r0, [r4, #8]
 8002830:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002834:	4629      	mov	r1, r5
 8002836:	f000 fb41 	bl	8002ebc <memset>
 800283a:	6034      	str	r4, [r6, #0]
 800283c:	6836      	ldr	r6, [r6, #0]
 800283e:	e7be      	b.n	80027be <__sfp+0x1a>
 8002840:	200002c0 	.word	0x200002c0
 8002844:	20000014 	.word	0x20000014
 8002848:	ffff0001 	.word	0xffff0001

0800284c <__sinit>:
 800284c:	b510      	push	{r4, lr}
 800284e:	4604      	mov	r4, r0
 8002850:	f7ff ff9c 	bl	800278c <__sfp_lock_acquire>
 8002854:	6a23      	ldr	r3, [r4, #32]
 8002856:	b11b      	cbz	r3, 8002860 <__sinit+0x14>
 8002858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800285c:	f7ff bf9c 	b.w	8002798 <__sfp_lock_release>
 8002860:	4b04      	ldr	r3, [pc, #16]	; (8002874 <__sinit+0x28>)
 8002862:	6223      	str	r3, [r4, #32]
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <__sinit+0x2c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1f5      	bne.n	8002858 <__sinit+0xc>
 800286c:	f7ff ff70 	bl	8002750 <global_stdio_init.part.0>
 8002870:	e7f2      	b.n	8002858 <__sinit+0xc>
 8002872:	bf00      	nop
 8002874:	08002711 	.word	0x08002711
 8002878:	200002c0 	.word	0x200002c0

0800287c <_fopen_r>:
 800287c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800287e:	460f      	mov	r7, r1
 8002880:	4611      	mov	r1, r2
 8002882:	aa01      	add	r2, sp, #4
 8002884:	4605      	mov	r5, r0
 8002886:	f000 ff73 	bl	8003770 <__sflags>
 800288a:	4606      	mov	r6, r0
 800288c:	b918      	cbnz	r0, 8002896 <_fopen_r+0x1a>
 800288e:	2400      	movs	r4, #0
 8002890:	4620      	mov	r0, r4
 8002892:	b003      	add	sp, #12
 8002894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002896:	4628      	mov	r0, r5
 8002898:	f7ff ff84 	bl	80027a4 <__sfp>
 800289c:	4604      	mov	r4, r0
 800289e:	2800      	cmp	r0, #0
 80028a0:	d0f5      	beq.n	800288e <_fopen_r+0x12>
 80028a2:	4639      	mov	r1, r7
 80028a4:	9a01      	ldr	r2, [sp, #4]
 80028a6:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 80028aa:	4628      	mov	r0, r5
 80028ac:	f000 fb30 	bl	8002f10 <_open_r>
 80028b0:	1e07      	subs	r7, r0, #0
 80028b2:	da09      	bge.n	80028c8 <_fopen_r+0x4c>
 80028b4:	2500      	movs	r5, #0
 80028b6:	f7ff ff69 	bl	800278c <__sfp_lock_acquire>
 80028ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028bc:	81a5      	strh	r5, [r4, #12]
 80028be:	f000 fb88 	bl	8002fd2 <__retarget_lock_close_recursive>
 80028c2:	f7ff ff69 	bl	8002798 <__sfp_lock_release>
 80028c6:	e7e2      	b.n	800288e <_fopen_r+0x12>
 80028c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028ca:	07db      	lsls	r3, r3, #31
 80028cc:	d405      	bmi.n	80028da <_fopen_r+0x5e>
 80028ce:	89a3      	ldrh	r3, [r4, #12]
 80028d0:	0598      	lsls	r0, r3, #22
 80028d2:	d402      	bmi.n	80028da <_fopen_r+0x5e>
 80028d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80028d6:	f000 fb7d 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <_fopen_r+0x98>)
 80028dc:	6263      	str	r3, [r4, #36]	; 0x24
 80028de:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <_fopen_r+0x9c>)
 80028e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <_fopen_r+0xa0>)
 80028e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028e6:	05f1      	lsls	r1, r6, #23
 80028e8:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <_fopen_r+0xa4>)
 80028ea:	81e7      	strh	r7, [r4, #14]
 80028ec:	81a6      	strh	r6, [r4, #12]
 80028ee:	6224      	str	r4, [r4, #32]
 80028f0:	6323      	str	r3, [r4, #48]	; 0x30
 80028f2:	d505      	bpl.n	8002900 <_fopen_r+0x84>
 80028f4:	2302      	movs	r3, #2
 80028f6:	2200      	movs	r2, #0
 80028f8:	4621      	mov	r1, r4
 80028fa:	4628      	mov	r0, r5
 80028fc:	f000 f874 	bl	80029e8 <_fseek_r>
 8002900:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002902:	07da      	lsls	r2, r3, #31
 8002904:	d4c4      	bmi.n	8002890 <_fopen_r+0x14>
 8002906:	89a3      	ldrh	r3, [r4, #12]
 8002908:	059b      	lsls	r3, r3, #22
 800290a:	d4c1      	bmi.n	8002890 <_fopen_r+0x14>
 800290c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800290e:	f000 fb62 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002912:	e7bd      	b.n	8002890 <_fopen_r+0x14>
 8002914:	08002bcd 	.word	0x08002bcd
 8002918:	08002bef 	.word	0x08002bef
 800291c:	08002c27 	.word	0x08002c27
 8002920:	08002c4b 	.word	0x08002c4b

08002924 <fopen>:
 8002924:	4b02      	ldr	r3, [pc, #8]	; (8002930 <fopen+0xc>)
 8002926:	460a      	mov	r2, r1
 8002928:	4601      	mov	r1, r0
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f7ff bfa6 	b.w	800287c <_fopen_r>
 8002930:	2000006c 	.word	0x2000006c

08002934 <_fputs_r>:
 8002934:	b570      	push	{r4, r5, r6, lr}
 8002936:	460d      	mov	r5, r1
 8002938:	4614      	mov	r4, r2
 800293a:	4606      	mov	r6, r0
 800293c:	b118      	cbz	r0, 8002946 <_fputs_r+0x12>
 800293e:	6a03      	ldr	r3, [r0, #32]
 8002940:	b90b      	cbnz	r3, 8002946 <_fputs_r+0x12>
 8002942:	f7ff ff83 	bl	800284c <__sinit>
 8002946:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002948:	07da      	lsls	r2, r3, #31
 800294a:	d405      	bmi.n	8002958 <_fputs_r+0x24>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	059b      	lsls	r3, r3, #22
 8002950:	d402      	bmi.n	8002958 <_fputs_r+0x24>
 8002952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002954:	f000 fb3e 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 8002958:	89a3      	ldrh	r3, [r4, #12]
 800295a:	0718      	lsls	r0, r3, #28
 800295c:	d511      	bpl.n	8002982 <_fputs_r+0x4e>
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	b17b      	cbz	r3, 8002982 <_fputs_r+0x4e>
 8002962:	3d01      	subs	r5, #1
 8002964:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002968:	b9e9      	cbnz	r1, 80029a6 <_fputs_r+0x72>
 800296a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800296c:	f015 0501 	ands.w	r5, r5, #1
 8002970:	d12f      	bne.n	80029d2 <_fputs_r+0x9e>
 8002972:	89a3      	ldrh	r3, [r4, #12]
 8002974:	0599      	lsls	r1, r3, #22
 8002976:	d402      	bmi.n	800297e <_fputs_r+0x4a>
 8002978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800297a:	f000 fb2c 	bl	8002fd6 <__retarget_lock_release_recursive>
 800297e:	4628      	mov	r0, r5
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	4621      	mov	r1, r4
 8002984:	4630      	mov	r0, r6
 8002986:	f000 f9a1 	bl	8002ccc <__swsetup_r>
 800298a:	2800      	cmp	r0, #0
 800298c:	d0e9      	beq.n	8002962 <_fputs_r+0x2e>
 800298e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002990:	07da      	lsls	r2, r3, #31
 8002992:	d405      	bmi.n	80029a0 <_fputs_r+0x6c>
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	059b      	lsls	r3, r3, #22
 8002998:	d402      	bmi.n	80029a0 <_fputs_r+0x6c>
 800299a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800299c:	f000 fb1b 	bl	8002fd6 <__retarget_lock_release_recursive>
 80029a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80029a4:	e7eb      	b.n	800297e <_fputs_r+0x4a>
 80029a6:	68a3      	ldr	r3, [r4, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	60a3      	str	r3, [r4, #8]
 80029ae:	da04      	bge.n	80029ba <_fputs_r+0x86>
 80029b0:	69a2      	ldr	r2, [r4, #24]
 80029b2:	4293      	cmp	r3, r2
 80029b4:	db06      	blt.n	80029c4 <_fputs_r+0x90>
 80029b6:	290a      	cmp	r1, #10
 80029b8:	d004      	beq.n	80029c4 <_fputs_r+0x90>
 80029ba:	6823      	ldr	r3, [r4, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	6022      	str	r2, [r4, #0]
 80029c0:	7019      	strb	r1, [r3, #0]
 80029c2:	e7cf      	b.n	8002964 <_fputs_r+0x30>
 80029c4:	4622      	mov	r2, r4
 80029c6:	4630      	mov	r0, r6
 80029c8:	f000 f943 	bl	8002c52 <__swbuf_r>
 80029cc:	3001      	adds	r0, #1
 80029ce:	d1c9      	bne.n	8002964 <_fputs_r+0x30>
 80029d0:	e7dd      	b.n	800298e <_fputs_r+0x5a>
 80029d2:	460d      	mov	r5, r1
 80029d4:	e7d3      	b.n	800297e <_fputs_r+0x4a>
	...

080029d8 <fputs>:
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <fputs+0xc>)
 80029da:	460a      	mov	r2, r1
 80029dc:	4601      	mov	r1, r0
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f7ff bfa8 	b.w	8002934 <_fputs_r>
 80029e4:	2000006c 	.word	0x2000006c

080029e8 <_fseek_r>:
 80029e8:	f000 b9c8 	b.w	8002d7c <_fseeko_r>

080029ec <_fwalk_sglue>:
 80029ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029f0:	4607      	mov	r7, r0
 80029f2:	4688      	mov	r8, r1
 80029f4:	4614      	mov	r4, r2
 80029f6:	2600      	movs	r6, #0
 80029f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80029fc:	f1b9 0901 	subs.w	r9, r9, #1
 8002a00:	d505      	bpl.n	8002a0e <_fwalk_sglue+0x22>
 8002a02:	6824      	ldr	r4, [r4, #0]
 8002a04:	2c00      	cmp	r4, #0
 8002a06:	d1f7      	bne.n	80029f8 <_fwalk_sglue+0xc>
 8002a08:	4630      	mov	r0, r6
 8002a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a0e:	89ab      	ldrh	r3, [r5, #12]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d907      	bls.n	8002a24 <_fwalk_sglue+0x38>
 8002a14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	d003      	beq.n	8002a24 <_fwalk_sglue+0x38>
 8002a1c:	4629      	mov	r1, r5
 8002a1e:	4638      	mov	r0, r7
 8002a20:	47c0      	blx	r8
 8002a22:	4306      	orrs	r6, r0
 8002a24:	3568      	adds	r5, #104	; 0x68
 8002a26:	e7e9      	b.n	80029fc <_fwalk_sglue+0x10>

08002a28 <_fwrite_r>:
 8002a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a2c:	9c08      	ldr	r4, [sp, #32]
 8002a2e:	468a      	mov	sl, r1
 8002a30:	4690      	mov	r8, r2
 8002a32:	fb02 f903 	mul.w	r9, r2, r3
 8002a36:	4606      	mov	r6, r0
 8002a38:	b118      	cbz	r0, 8002a42 <_fwrite_r+0x1a>
 8002a3a:	6a03      	ldr	r3, [r0, #32]
 8002a3c:	b90b      	cbnz	r3, 8002a42 <_fwrite_r+0x1a>
 8002a3e:	f7ff ff05 	bl	800284c <__sinit>
 8002a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a44:	07dd      	lsls	r5, r3, #31
 8002a46:	d405      	bmi.n	8002a54 <_fwrite_r+0x2c>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	0598      	lsls	r0, r3, #22
 8002a4c:	d402      	bmi.n	8002a54 <_fwrite_r+0x2c>
 8002a4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002a50:	f000 fac0 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	0719      	lsls	r1, r3, #28
 8002a58:	d516      	bpl.n	8002a88 <_fwrite_r+0x60>
 8002a5a:	6923      	ldr	r3, [r4, #16]
 8002a5c:	b1a3      	cbz	r3, 8002a88 <_fwrite_r+0x60>
 8002a5e:	2500      	movs	r5, #0
 8002a60:	454d      	cmp	r5, r9
 8002a62:	d01f      	beq.n	8002aa4 <_fwrite_r+0x7c>
 8002a64:	68a7      	ldr	r7, [r4, #8]
 8002a66:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8002a6a:	3f01      	subs	r7, #1
 8002a6c:	2f00      	cmp	r7, #0
 8002a6e:	60a7      	str	r7, [r4, #8]
 8002a70:	da04      	bge.n	8002a7c <_fwrite_r+0x54>
 8002a72:	69a3      	ldr	r3, [r4, #24]
 8002a74:	429f      	cmp	r7, r3
 8002a76:	db0f      	blt.n	8002a98 <_fwrite_r+0x70>
 8002a78:	290a      	cmp	r1, #10
 8002a7a:	d00d      	beq.n	8002a98 <_fwrite_r+0x70>
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	6022      	str	r2, [r4, #0]
 8002a82:	7019      	strb	r1, [r3, #0]
 8002a84:	3501      	adds	r5, #1
 8002a86:	e7eb      	b.n	8002a60 <_fwrite_r+0x38>
 8002a88:	4621      	mov	r1, r4
 8002a8a:	4630      	mov	r0, r6
 8002a8c:	f000 f91e 	bl	8002ccc <__swsetup_r>
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d0e4      	beq.n	8002a5e <_fwrite_r+0x36>
 8002a94:	2500      	movs	r5, #0
 8002a96:	e005      	b.n	8002aa4 <_fwrite_r+0x7c>
 8002a98:	4622      	mov	r2, r4
 8002a9a:	4630      	mov	r0, r6
 8002a9c:	f000 f8d9 	bl	8002c52 <__swbuf_r>
 8002aa0:	3001      	adds	r0, #1
 8002aa2:	d1ef      	bne.n	8002a84 <_fwrite_r+0x5c>
 8002aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aa6:	07da      	lsls	r2, r3, #31
 8002aa8:	d405      	bmi.n	8002ab6 <_fwrite_r+0x8e>
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	059b      	lsls	r3, r3, #22
 8002aae:	d402      	bmi.n	8002ab6 <_fwrite_r+0x8e>
 8002ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ab2:	f000 fa90 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002ab6:	fbb5 f0f8 	udiv	r0, r5, r8
 8002aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08002ac0 <fwrite>:
 8002ac0:	b507      	push	{r0, r1, r2, lr}
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	4601      	mov	r1, r0
 8002aca:	4803      	ldr	r0, [pc, #12]	; (8002ad8 <fwrite+0x18>)
 8002acc:	6800      	ldr	r0, [r0, #0]
 8002ace:	f7ff ffab 	bl	8002a28 <_fwrite_r>
 8002ad2:	b003      	add	sp, #12
 8002ad4:	f85d fb04 	ldr.w	pc, [sp], #4
 8002ad8:	2000006c 	.word	0x2000006c

08002adc <_gets_r>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	6a03      	ldr	r3, [r0, #32]
 8002ae0:	6844      	ldr	r4, [r0, #4]
 8002ae2:	4606      	mov	r6, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	b90b      	cbnz	r3, 8002aec <_gets_r+0x10>
 8002ae8:	f7ff feb0 	bl	800284c <__sinit>
 8002aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002aee:	07df      	lsls	r7, r3, #31
 8002af0:	d405      	bmi.n	8002afe <_gets_r+0x22>
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	0598      	lsls	r0, r3, #22
 8002af6:	d402      	bmi.n	8002afe <_gets_r+0x22>
 8002af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002afa:	f000 fa6b 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 8002afe:	462f      	mov	r7, r5
 8002b00:	6863      	ldr	r3, [r4, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	6063      	str	r3, [r4, #4]
 8002b08:	da1d      	bge.n	8002b46 <_gets_r+0x6a>
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4630      	mov	r0, r6
 8002b0e:	f000 f845 	bl	8002b9c <__srget_r>
 8002b12:	280a      	cmp	r0, #10
 8002b14:	d003      	beq.n	8002b1e <_gets_r+0x42>
 8002b16:	1c41      	adds	r1, r0, #1
 8002b18:	d11b      	bne.n	8002b52 <_gets_r+0x76>
 8002b1a:	42af      	cmp	r7, r5
 8002b1c:	d006      	beq.n	8002b2c <_gets_r+0x50>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	703b      	strb	r3, [r7, #0]
 8002b22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b24:	07da      	lsls	r2, r3, #31
 8002b26:	d517      	bpl.n	8002b58 <_gets_r+0x7c>
 8002b28:	4628      	mov	r0, r5
 8002b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b2c:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002b2e:	f015 0501 	ands.w	r5, r5, #1
 8002b32:	d106      	bne.n	8002b42 <_gets_r+0x66>
 8002b34:	89a3      	ldrh	r3, [r4, #12]
 8002b36:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8002b3a:	d1f5      	bne.n	8002b28 <_gets_r+0x4c>
 8002b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b3e:	f000 fa4a 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002b42:	2500      	movs	r5, #0
 8002b44:	e7f0      	b.n	8002b28 <_gets_r+0x4c>
 8002b46:	6823      	ldr	r3, [r4, #0]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	6022      	str	r2, [r4, #0]
 8002b4c:	7818      	ldrb	r0, [r3, #0]
 8002b4e:	280a      	cmp	r0, #10
 8002b50:	d0e5      	beq.n	8002b1e <_gets_r+0x42>
 8002b52:	f807 0b01 	strb.w	r0, [r7], #1
 8002b56:	e7d3      	b.n	8002b00 <_gets_r+0x24>
 8002b58:	89a3      	ldrh	r3, [r4, #12]
 8002b5a:	059b      	lsls	r3, r3, #22
 8002b5c:	d4e4      	bmi.n	8002b28 <_gets_r+0x4c>
 8002b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b60:	f000 fa39 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002b64:	e7e0      	b.n	8002b28 <_gets_r+0x4c>
	...

08002b68 <gets>:
 8002b68:	4b02      	ldr	r3, [pc, #8]	; (8002b74 <gets+0xc>)
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	f7ff bfb5 	b.w	8002adc <_gets_r>
 8002b72:	bf00      	nop
 8002b74:	2000006c 	.word	0x2000006c

08002b78 <iprintf>:
 8002b78:	b40f      	push	{r0, r1, r2, r3}
 8002b7a:	b507      	push	{r0, r1, r2, lr}
 8002b7c:	4906      	ldr	r1, [pc, #24]	; (8002b98 <iprintf+0x20>)
 8002b7e:	ab04      	add	r3, sp, #16
 8002b80:	6808      	ldr	r0, [r1, #0]
 8002b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b86:	6881      	ldr	r1, [r0, #8]
 8002b88:	9301      	str	r3, [sp, #4]
 8002b8a:	f000 fb47 	bl	800321c <_vfiprintf_r>
 8002b8e:	b003      	add	sp, #12
 8002b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b94:	b004      	add	sp, #16
 8002b96:	4770      	bx	lr
 8002b98:	2000006c 	.word	0x2000006c

08002b9c <__srget_r>:
 8002b9c:	b538      	push	{r3, r4, r5, lr}
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	b118      	cbz	r0, 8002bac <__srget_r+0x10>
 8002ba4:	6a03      	ldr	r3, [r0, #32]
 8002ba6:	b90b      	cbnz	r3, 8002bac <__srget_r+0x10>
 8002ba8:	f7ff fe50 	bl	800284c <__sinit>
 8002bac:	4621      	mov	r1, r4
 8002bae:	4628      	mov	r0, r5
 8002bb0:	f000 fe84 	bl	80038bc <__srefill_r>
 8002bb4:	b938      	cbnz	r0, 8002bc6 <__srget_r+0x2a>
 8002bb6:	6863      	ldr	r3, [r4, #4]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	6063      	str	r3, [r4, #4]
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	7818      	ldrb	r0, [r3, #0]
 8002bc4:	bd38      	pop	{r3, r4, r5, pc}
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bca:	e7fb      	b.n	8002bc4 <__srget_r+0x28>

08002bcc <__sread>:
 8002bcc:	b510      	push	{r4, lr}
 8002bce:	460c      	mov	r4, r1
 8002bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bd4:	f000 f9ae 	bl	8002f34 <_read_r>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	bfab      	itete	ge
 8002bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bde:	89a3      	ldrhlt	r3, [r4, #12]
 8002be0:	181b      	addge	r3, r3, r0
 8002be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002be6:	bfac      	ite	ge
 8002be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bea:	81a3      	strhlt	r3, [r4, #12]
 8002bec:	bd10      	pop	{r4, pc}

08002bee <__swrite>:
 8002bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf2:	461f      	mov	r7, r3
 8002bf4:	898b      	ldrh	r3, [r1, #12]
 8002bf6:	05db      	lsls	r3, r3, #23
 8002bf8:	4605      	mov	r5, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	4616      	mov	r6, r2
 8002bfe:	d505      	bpl.n	8002c0c <__swrite+0x1e>
 8002c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c04:	2302      	movs	r3, #2
 8002c06:	2200      	movs	r2, #0
 8002c08:	f000 f970 	bl	8002eec <_lseek_r>
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c16:	81a3      	strh	r3, [r4, #12]
 8002c18:	4632      	mov	r2, r6
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	4628      	mov	r0, r5
 8002c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c22:	f000 b999 	b.w	8002f58 <_write_r>

08002c26 <__sseek>:
 8002c26:	b510      	push	{r4, lr}
 8002c28:	460c      	mov	r4, r1
 8002c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c2e:	f000 f95d 	bl	8002eec <_lseek_r>
 8002c32:	1c43      	adds	r3, r0, #1
 8002c34:	89a3      	ldrh	r3, [r4, #12]
 8002c36:	bf15      	itete	ne
 8002c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c42:	81a3      	strheq	r3, [r4, #12]
 8002c44:	bf18      	it	ne
 8002c46:	81a3      	strhne	r3, [r4, #12]
 8002c48:	bd10      	pop	{r4, pc}

08002c4a <__sclose>:
 8002c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c4e:	f000 b93d 	b.w	8002ecc <_close_r>

08002c52 <__swbuf_r>:
 8002c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c54:	460e      	mov	r6, r1
 8002c56:	4614      	mov	r4, r2
 8002c58:	4605      	mov	r5, r0
 8002c5a:	b118      	cbz	r0, 8002c64 <__swbuf_r+0x12>
 8002c5c:	6a03      	ldr	r3, [r0, #32]
 8002c5e:	b90b      	cbnz	r3, 8002c64 <__swbuf_r+0x12>
 8002c60:	f7ff fdf4 	bl	800284c <__sinit>
 8002c64:	69a3      	ldr	r3, [r4, #24]
 8002c66:	60a3      	str	r3, [r4, #8]
 8002c68:	89a3      	ldrh	r3, [r4, #12]
 8002c6a:	071a      	lsls	r2, r3, #28
 8002c6c:	d525      	bpl.n	8002cba <__swbuf_r+0x68>
 8002c6e:	6923      	ldr	r3, [r4, #16]
 8002c70:	b31b      	cbz	r3, 8002cba <__swbuf_r+0x68>
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	6922      	ldr	r2, [r4, #16]
 8002c76:	1a98      	subs	r0, r3, r2
 8002c78:	6963      	ldr	r3, [r4, #20]
 8002c7a:	b2f6      	uxtb	r6, r6
 8002c7c:	4283      	cmp	r3, r0
 8002c7e:	4637      	mov	r7, r6
 8002c80:	dc04      	bgt.n	8002c8c <__swbuf_r+0x3a>
 8002c82:	4621      	mov	r1, r4
 8002c84:	4628      	mov	r0, r5
 8002c86:	f7ff fcd9 	bl	800263c <_fflush_r>
 8002c8a:	b9e0      	cbnz	r0, 8002cc6 <__swbuf_r+0x74>
 8002c8c:	68a3      	ldr	r3, [r4, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60a3      	str	r3, [r4, #8]
 8002c92:	6823      	ldr	r3, [r4, #0]
 8002c94:	1c5a      	adds	r2, r3, #1
 8002c96:	6022      	str	r2, [r4, #0]
 8002c98:	701e      	strb	r6, [r3, #0]
 8002c9a:	6962      	ldr	r2, [r4, #20]
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d004      	beq.n	8002cac <__swbuf_r+0x5a>
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	07db      	lsls	r3, r3, #31
 8002ca6:	d506      	bpl.n	8002cb6 <__swbuf_r+0x64>
 8002ca8:	2e0a      	cmp	r6, #10
 8002caa:	d104      	bne.n	8002cb6 <__swbuf_r+0x64>
 8002cac:	4621      	mov	r1, r4
 8002cae:	4628      	mov	r0, r5
 8002cb0:	f7ff fcc4 	bl	800263c <_fflush_r>
 8002cb4:	b938      	cbnz	r0, 8002cc6 <__swbuf_r+0x74>
 8002cb6:	4638      	mov	r0, r7
 8002cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cba:	4621      	mov	r1, r4
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	f000 f805 	bl	8002ccc <__swsetup_r>
 8002cc2:	2800      	cmp	r0, #0
 8002cc4:	d0d5      	beq.n	8002c72 <__swbuf_r+0x20>
 8002cc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002cca:	e7f4      	b.n	8002cb6 <__swbuf_r+0x64>

08002ccc <__swsetup_r>:
 8002ccc:	b538      	push	{r3, r4, r5, lr}
 8002cce:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <__swsetup_r+0xac>)
 8002cd0:	4605      	mov	r5, r0
 8002cd2:	6818      	ldr	r0, [r3, #0]
 8002cd4:	460c      	mov	r4, r1
 8002cd6:	b118      	cbz	r0, 8002ce0 <__swsetup_r+0x14>
 8002cd8:	6a03      	ldr	r3, [r0, #32]
 8002cda:	b90b      	cbnz	r3, 8002ce0 <__swsetup_r+0x14>
 8002cdc:	f7ff fdb6 	bl	800284c <__sinit>
 8002ce0:	89a3      	ldrh	r3, [r4, #12]
 8002ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ce6:	0718      	lsls	r0, r3, #28
 8002ce8:	d422      	bmi.n	8002d30 <__swsetup_r+0x64>
 8002cea:	06d9      	lsls	r1, r3, #27
 8002cec:	d407      	bmi.n	8002cfe <__swsetup_r+0x32>
 8002cee:	2309      	movs	r3, #9
 8002cf0:	602b      	str	r3, [r5, #0]
 8002cf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cfc:	e034      	b.n	8002d68 <__swsetup_r+0x9c>
 8002cfe:	0758      	lsls	r0, r3, #29
 8002d00:	d512      	bpl.n	8002d28 <__swsetup_r+0x5c>
 8002d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d04:	b141      	cbz	r1, 8002d18 <__swsetup_r+0x4c>
 8002d06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d0a:	4299      	cmp	r1, r3
 8002d0c:	d002      	beq.n	8002d14 <__swsetup_r+0x48>
 8002d0e:	4628      	mov	r0, r5
 8002d10:	f000 f962 	bl	8002fd8 <_free_r>
 8002d14:	2300      	movs	r3, #0
 8002d16:	6363      	str	r3, [r4, #52]	; 0x34
 8002d18:	89a3      	ldrh	r3, [r4, #12]
 8002d1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002d1e:	81a3      	strh	r3, [r4, #12]
 8002d20:	2300      	movs	r3, #0
 8002d22:	6063      	str	r3, [r4, #4]
 8002d24:	6923      	ldr	r3, [r4, #16]
 8002d26:	6023      	str	r3, [r4, #0]
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	81a3      	strh	r3, [r4, #12]
 8002d30:	6923      	ldr	r3, [r4, #16]
 8002d32:	b94b      	cbnz	r3, 8002d48 <__swsetup_r+0x7c>
 8002d34:	89a3      	ldrh	r3, [r4, #12]
 8002d36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d3e:	d003      	beq.n	8002d48 <__swsetup_r+0x7c>
 8002d40:	4621      	mov	r1, r4
 8002d42:	4628      	mov	r0, r5
 8002d44:	f000 fd70 	bl	8003828 <__smakebuf_r>
 8002d48:	89a0      	ldrh	r0, [r4, #12]
 8002d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d4e:	f010 0301 	ands.w	r3, r0, #1
 8002d52:	d00a      	beq.n	8002d6a <__swsetup_r+0x9e>
 8002d54:	2300      	movs	r3, #0
 8002d56:	60a3      	str	r3, [r4, #8]
 8002d58:	6963      	ldr	r3, [r4, #20]
 8002d5a:	425b      	negs	r3, r3
 8002d5c:	61a3      	str	r3, [r4, #24]
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	b943      	cbnz	r3, 8002d74 <__swsetup_r+0xa8>
 8002d62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d66:	d1c4      	bne.n	8002cf2 <__swsetup_r+0x26>
 8002d68:	bd38      	pop	{r3, r4, r5, pc}
 8002d6a:	0781      	lsls	r1, r0, #30
 8002d6c:	bf58      	it	pl
 8002d6e:	6963      	ldrpl	r3, [r4, #20]
 8002d70:	60a3      	str	r3, [r4, #8]
 8002d72:	e7f4      	b.n	8002d5e <__swsetup_r+0x92>
 8002d74:	2000      	movs	r0, #0
 8002d76:	e7f7      	b.n	8002d68 <__swsetup_r+0x9c>
 8002d78:	2000006c 	.word	0x2000006c

08002d7c <_fseeko_r>:
 8002d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d80:	460c      	mov	r4, r1
 8002d82:	4617      	mov	r7, r2
 8002d84:	461d      	mov	r5, r3
 8002d86:	4606      	mov	r6, r0
 8002d88:	b118      	cbz	r0, 8002d92 <_fseeko_r+0x16>
 8002d8a:	6a03      	ldr	r3, [r0, #32]
 8002d8c:	b90b      	cbnz	r3, 8002d92 <_fseeko_r+0x16>
 8002d8e:	f7ff fd5d 	bl	800284c <__sinit>
 8002d92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d94:	07d9      	lsls	r1, r3, #31
 8002d96:	d405      	bmi.n	8002da4 <_fseeko_r+0x28>
 8002d98:	89a3      	ldrh	r3, [r4, #12]
 8002d9a:	059a      	lsls	r2, r3, #22
 8002d9c:	d402      	bmi.n	8002da4 <_fseeko_r+0x28>
 8002d9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002da0:	f000 f918 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8002daa:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8002dae:	d103      	bne.n	8002db8 <_fseeko_r+0x3c>
 8002db0:	4621      	mov	r1, r4
 8002db2:	4630      	mov	r0, r6
 8002db4:	f7ff fc42 	bl	800263c <_fflush_r>
 8002db8:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8002dbc:	f1b8 0f00 	cmp.w	r8, #0
 8002dc0:	d109      	bne.n	8002dd6 <_fseeko_r+0x5a>
 8002dc2:	231d      	movs	r3, #29
 8002dc4:	6033      	str	r3, [r6, #0]
 8002dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002dc8:	07d9      	lsls	r1, r3, #31
 8002dca:	d56e      	bpl.n	8002eaa <_fseeko_r+0x12e>
 8002dcc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dd6:	2d01      	cmp	r5, #1
 8002dd8:	d036      	beq.n	8002e48 <_fseeko_r+0xcc>
 8002dda:	f035 0302 	bics.w	r3, r5, #2
 8002dde:	d162      	bne.n	8002ea6 <_fseeko_r+0x12a>
 8002de0:	6923      	ldr	r3, [r4, #16]
 8002de2:	b91b      	cbnz	r3, 8002dec <_fseeko_r+0x70>
 8002de4:	4621      	mov	r1, r4
 8002de6:	4630      	mov	r0, r6
 8002de8:	f000 fd1e 	bl	8003828 <__smakebuf_r>
 8002dec:	4621      	mov	r1, r4
 8002dee:	4630      	mov	r0, r6
 8002df0:	f7ff fc24 	bl	800263c <_fflush_r>
 8002df4:	2800      	cmp	r0, #0
 8002df6:	d1e6      	bne.n	8002dc6 <_fseeko_r+0x4a>
 8002df8:	6a21      	ldr	r1, [r4, #32]
 8002dfa:	462b      	mov	r3, r5
 8002dfc:	463a      	mov	r2, r7
 8002dfe:	4630      	mov	r0, r6
 8002e00:	47c0      	blx	r8
 8002e02:	3001      	adds	r0, #1
 8002e04:	d0df      	beq.n	8002dc6 <_fseeko_r+0x4a>
 8002e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e08:	b141      	cbz	r1, 8002e1c <_fseeko_r+0xa0>
 8002e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e0e:	4299      	cmp	r1, r3
 8002e10:	d002      	beq.n	8002e18 <_fseeko_r+0x9c>
 8002e12:	4630      	mov	r0, r6
 8002e14:	f000 f8e0 	bl	8002fd8 <_free_r>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	6363      	str	r3, [r4, #52]	; 0x34
 8002e1c:	6923      	ldr	r3, [r4, #16]
 8002e1e:	6023      	str	r3, [r4, #0]
 8002e20:	89a3      	ldrh	r3, [r4, #12]
 8002e22:	2600      	movs	r6, #0
 8002e24:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8002e28:	6066      	str	r6, [r4, #4]
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	2208      	movs	r2, #8
 8002e2e:	4631      	mov	r1, r6
 8002e30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e34:	f000 f842 	bl	8002ebc <memset>
 8002e38:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8002e3a:	f015 0501 	ands.w	r5, r5, #1
 8002e3e:	d13b      	bne.n	8002eb8 <_fseeko_r+0x13c>
 8002e40:	89a3      	ldrh	r3, [r4, #12]
 8002e42:	059b      	lsls	r3, r3, #22
 8002e44:	d4c4      	bmi.n	8002dd0 <_fseeko_r+0x54>
 8002e46:	e021      	b.n	8002e8c <_fseeko_r+0x110>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff fbf6 	bl	800263c <_fflush_r>
 8002e50:	89a2      	ldrh	r2, [r4, #12]
 8002e52:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002e56:	d00c      	beq.n	8002e72 <_fseeko_r+0xf6>
 8002e58:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002e5a:	89a3      	ldrh	r3, [r4, #12]
 8002e5c:	075a      	lsls	r2, r3, #29
 8002e5e:	d519      	bpl.n	8002e94 <_fseeko_r+0x118>
 8002e60:	6863      	ldr	r3, [r4, #4]
 8002e62:	1aed      	subs	r5, r5, r3
 8002e64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002e66:	b10b      	cbz	r3, 8002e6c <_fseeko_r+0xf0>
 8002e68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e6a:	1aed      	subs	r5, r5, r3
 8002e6c:	442f      	add	r7, r5
 8002e6e:	2500      	movs	r5, #0
 8002e70:	e7b6      	b.n	8002de0 <_fseeko_r+0x64>
 8002e72:	462b      	mov	r3, r5
 8002e74:	6a21      	ldr	r1, [r4, #32]
 8002e76:	4630      	mov	r0, r6
 8002e78:	47c0      	blx	r8
 8002e7a:	1c43      	adds	r3, r0, #1
 8002e7c:	4605      	mov	r5, r0
 8002e7e:	d1ec      	bne.n	8002e5a <_fseeko_r+0xde>
 8002e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e82:	07d8      	lsls	r0, r3, #31
 8002e84:	d4a2      	bmi.n	8002dcc <_fseeko_r+0x50>
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	0599      	lsls	r1, r3, #22
 8002e8a:	d49f      	bmi.n	8002dcc <_fseeko_r+0x50>
 8002e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e8e:	f000 f8a2 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002e92:	e79d      	b.n	8002dd0 <_fseeko_r+0x54>
 8002e94:	0718      	lsls	r0, r3, #28
 8002e96:	d5e9      	bpl.n	8002e6c <_fseeko_r+0xf0>
 8002e98:	6823      	ldr	r3, [r4, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0e6      	beq.n	8002e6c <_fseeko_r+0xf0>
 8002e9e:	6922      	ldr	r2, [r4, #16]
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	441d      	add	r5, r3
 8002ea4:	e7e2      	b.n	8002e6c <_fseeko_r+0xf0>
 8002ea6:	2316      	movs	r3, #22
 8002ea8:	e78c      	b.n	8002dc4 <_fseeko_r+0x48>
 8002eaa:	89a3      	ldrh	r3, [r4, #12]
 8002eac:	059a      	lsls	r2, r3, #22
 8002eae:	d48d      	bmi.n	8002dcc <_fseeko_r+0x50>
 8002eb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002eb2:	f000 f890 	bl	8002fd6 <__retarget_lock_release_recursive>
 8002eb6:	e789      	b.n	8002dcc <_fseeko_r+0x50>
 8002eb8:	4635      	mov	r5, r6
 8002eba:	e789      	b.n	8002dd0 <_fseeko_r+0x54>

08002ebc <memset>:
 8002ebc:	4402      	add	r2, r0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <_close_r>:
 8002ecc:	b538      	push	{r3, r4, r5, lr}
 8002ece:	4d06      	ldr	r5, [pc, #24]	; (8002ee8 <_close_r+0x1c>)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	4604      	mov	r4, r0
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	602b      	str	r3, [r5, #0]
 8002ed8:	f7ff f8f6 	bl	80020c8 <_close>
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	d102      	bne.n	8002ee6 <_close_r+0x1a>
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	b103      	cbz	r3, 8002ee6 <_close_r+0x1a>
 8002ee4:	6023      	str	r3, [r4, #0]
 8002ee6:	bd38      	pop	{r3, r4, r5, pc}
 8002ee8:	200002c4 	.word	0x200002c4

08002eec <_lseek_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4d07      	ldr	r5, [pc, #28]	; (8002f0c <_lseek_r+0x20>)
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	602a      	str	r2, [r5, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff f8a1 	bl	8002042 <_lseek>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d102      	bne.n	8002f0a <_lseek_r+0x1e>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	b103      	cbz	r3, 8002f0a <_lseek_r+0x1e>
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
 8002f0c:	200002c4 	.word	0x200002c4

08002f10 <_open_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4d07      	ldr	r5, [pc, #28]	; (8002f30 <_open_r+0x20>)
 8002f14:	4604      	mov	r4, r0
 8002f16:	4608      	mov	r0, r1
 8002f18:	4611      	mov	r1, r2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	602a      	str	r2, [r5, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f7ff f99e 	bl	8002260 <_open>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d102      	bne.n	8002f2e <_open_r+0x1e>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	b103      	cbz	r3, 8002f2e <_open_r+0x1e>
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	200002c4 	.word	0x200002c4

08002f34 <_read_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4d07      	ldr	r5, [pc, #28]	; (8002f54 <_read_r+0x20>)
 8002f38:	4604      	mov	r4, r0
 8002f3a:	4608      	mov	r0, r1
 8002f3c:	4611      	mov	r1, r2
 8002f3e:	2200      	movs	r2, #0
 8002f40:	602a      	str	r2, [r5, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	f7ff f825 	bl	8001f92 <_read>
 8002f48:	1c43      	adds	r3, r0, #1
 8002f4a:	d102      	bne.n	8002f52 <_read_r+0x1e>
 8002f4c:	682b      	ldr	r3, [r5, #0]
 8002f4e:	b103      	cbz	r3, 8002f52 <_read_r+0x1e>
 8002f50:	6023      	str	r3, [r4, #0]
 8002f52:	bd38      	pop	{r3, r4, r5, pc}
 8002f54:	200002c4 	.word	0x200002c4

08002f58 <_write_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	4d07      	ldr	r5, [pc, #28]	; (8002f78 <_write_r+0x20>)
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	4608      	mov	r0, r1
 8002f60:	4611      	mov	r1, r2
 8002f62:	2200      	movs	r2, #0
 8002f64:	602a      	str	r2, [r5, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7ff f87d 	bl	8002066 <_write>
 8002f6c:	1c43      	adds	r3, r0, #1
 8002f6e:	d102      	bne.n	8002f76 <_write_r+0x1e>
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	b103      	cbz	r3, 8002f76 <_write_r+0x1e>
 8002f74:	6023      	str	r3, [r4, #0]
 8002f76:	bd38      	pop	{r3, r4, r5, pc}
 8002f78:	200002c4 	.word	0x200002c4

08002f7c <__errno>:
 8002f7c:	4b01      	ldr	r3, [pc, #4]	; (8002f84 <__errno+0x8>)
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	2000006c 	.word	0x2000006c

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4d0d      	ldr	r5, [pc, #52]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8c:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	2600      	movs	r6, #0
 8002f94:	42a6      	cmp	r6, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	4d0b      	ldr	r5, [pc, #44]	; (8002fc8 <__libc_init_array+0x40>)
 8002f9a:	4c0c      	ldr	r4, [pc, #48]	; (8002fcc <__libc_init_array+0x44>)
 8002f9c:	f000 fd38 	bl	8003a10 <_init>
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb0:	4798      	blx	r3
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fba:	4798      	blx	r3
 8002fbc:	3601      	adds	r6, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	08003b78 	.word	0x08003b78
 8002fc4:	08003b78 	.word	0x08003b78
 8002fc8:	08003b78 	.word	0x08003b78
 8002fcc:	08003b7c 	.word	0x08003b7c

08002fd0 <__retarget_lock_init_recursive>:
 8002fd0:	4770      	bx	lr

08002fd2 <__retarget_lock_close_recursive>:
 8002fd2:	4770      	bx	lr

08002fd4 <__retarget_lock_acquire_recursive>:
 8002fd4:	4770      	bx	lr

08002fd6 <__retarget_lock_release_recursive>:
 8002fd6:	4770      	bx	lr

08002fd8 <_free_r>:
 8002fd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002fda:	2900      	cmp	r1, #0
 8002fdc:	d044      	beq.n	8003068 <_free_r+0x90>
 8002fde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fe2:	9001      	str	r0, [sp, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f1a1 0404 	sub.w	r4, r1, #4
 8002fea:	bfb8      	it	lt
 8002fec:	18e4      	addlt	r4, r4, r3
 8002fee:	f000 f8df 	bl	80031b0 <__malloc_lock>
 8002ff2:	4a1e      	ldr	r2, [pc, #120]	; (800306c <_free_r+0x94>)
 8002ff4:	9801      	ldr	r0, [sp, #4]
 8002ff6:	6813      	ldr	r3, [r2, #0]
 8002ff8:	b933      	cbnz	r3, 8003008 <_free_r+0x30>
 8002ffa:	6063      	str	r3, [r4, #4]
 8002ffc:	6014      	str	r4, [r2, #0]
 8002ffe:	b003      	add	sp, #12
 8003000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003004:	f000 b8da 	b.w	80031bc <__malloc_unlock>
 8003008:	42a3      	cmp	r3, r4
 800300a:	d908      	bls.n	800301e <_free_r+0x46>
 800300c:	6825      	ldr	r5, [r4, #0]
 800300e:	1961      	adds	r1, r4, r5
 8003010:	428b      	cmp	r3, r1
 8003012:	bf01      	itttt	eq
 8003014:	6819      	ldreq	r1, [r3, #0]
 8003016:	685b      	ldreq	r3, [r3, #4]
 8003018:	1949      	addeq	r1, r1, r5
 800301a:	6021      	streq	r1, [r4, #0]
 800301c:	e7ed      	b.n	8002ffa <_free_r+0x22>
 800301e:	461a      	mov	r2, r3
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b10b      	cbz	r3, 8003028 <_free_r+0x50>
 8003024:	42a3      	cmp	r3, r4
 8003026:	d9fa      	bls.n	800301e <_free_r+0x46>
 8003028:	6811      	ldr	r1, [r2, #0]
 800302a:	1855      	adds	r5, r2, r1
 800302c:	42a5      	cmp	r5, r4
 800302e:	d10b      	bne.n	8003048 <_free_r+0x70>
 8003030:	6824      	ldr	r4, [r4, #0]
 8003032:	4421      	add	r1, r4
 8003034:	1854      	adds	r4, r2, r1
 8003036:	42a3      	cmp	r3, r4
 8003038:	6011      	str	r1, [r2, #0]
 800303a:	d1e0      	bne.n	8002ffe <_free_r+0x26>
 800303c:	681c      	ldr	r4, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	6053      	str	r3, [r2, #4]
 8003042:	440c      	add	r4, r1
 8003044:	6014      	str	r4, [r2, #0]
 8003046:	e7da      	b.n	8002ffe <_free_r+0x26>
 8003048:	d902      	bls.n	8003050 <_free_r+0x78>
 800304a:	230c      	movs	r3, #12
 800304c:	6003      	str	r3, [r0, #0]
 800304e:	e7d6      	b.n	8002ffe <_free_r+0x26>
 8003050:	6825      	ldr	r5, [r4, #0]
 8003052:	1961      	adds	r1, r4, r5
 8003054:	428b      	cmp	r3, r1
 8003056:	bf04      	itt	eq
 8003058:	6819      	ldreq	r1, [r3, #0]
 800305a:	685b      	ldreq	r3, [r3, #4]
 800305c:	6063      	str	r3, [r4, #4]
 800305e:	bf04      	itt	eq
 8003060:	1949      	addeq	r1, r1, r5
 8003062:	6021      	streq	r1, [r4, #0]
 8003064:	6054      	str	r4, [r2, #4]
 8003066:	e7ca      	b.n	8002ffe <_free_r+0x26>
 8003068:	b003      	add	sp, #12
 800306a:	bd30      	pop	{r4, r5, pc}
 800306c:	200002cc 	.word	0x200002cc

08003070 <sbrk_aligned>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4e0e      	ldr	r6, [pc, #56]	; (80030ac <sbrk_aligned+0x3c>)
 8003074:	460c      	mov	r4, r1
 8003076:	6831      	ldr	r1, [r6, #0]
 8003078:	4605      	mov	r5, r0
 800307a:	b911      	cbnz	r1, 8003082 <sbrk_aligned+0x12>
 800307c:	f000 fcb8 	bl	80039f0 <_sbrk_r>
 8003080:	6030      	str	r0, [r6, #0]
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f000 fcb3 	bl	80039f0 <_sbrk_r>
 800308a:	1c43      	adds	r3, r0, #1
 800308c:	d00a      	beq.n	80030a4 <sbrk_aligned+0x34>
 800308e:	1cc4      	adds	r4, r0, #3
 8003090:	f024 0403 	bic.w	r4, r4, #3
 8003094:	42a0      	cmp	r0, r4
 8003096:	d007      	beq.n	80030a8 <sbrk_aligned+0x38>
 8003098:	1a21      	subs	r1, r4, r0
 800309a:	4628      	mov	r0, r5
 800309c:	f000 fca8 	bl	80039f0 <_sbrk_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d101      	bne.n	80030a8 <sbrk_aligned+0x38>
 80030a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80030a8:	4620      	mov	r0, r4
 80030aa:	bd70      	pop	{r4, r5, r6, pc}
 80030ac:	200002d0 	.word	0x200002d0

080030b0 <_malloc_r>:
 80030b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b4:	1ccd      	adds	r5, r1, #3
 80030b6:	f025 0503 	bic.w	r5, r5, #3
 80030ba:	3508      	adds	r5, #8
 80030bc:	2d0c      	cmp	r5, #12
 80030be:	bf38      	it	cc
 80030c0:	250c      	movcc	r5, #12
 80030c2:	2d00      	cmp	r5, #0
 80030c4:	4607      	mov	r7, r0
 80030c6:	db01      	blt.n	80030cc <_malloc_r+0x1c>
 80030c8:	42a9      	cmp	r1, r5
 80030ca:	d905      	bls.n	80030d8 <_malloc_r+0x28>
 80030cc:	230c      	movs	r3, #12
 80030ce:	603b      	str	r3, [r7, #0]
 80030d0:	2600      	movs	r6, #0
 80030d2:	4630      	mov	r0, r6
 80030d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031ac <_malloc_r+0xfc>
 80030dc:	f000 f868 	bl	80031b0 <__malloc_lock>
 80030e0:	f8d8 3000 	ldr.w	r3, [r8]
 80030e4:	461c      	mov	r4, r3
 80030e6:	bb5c      	cbnz	r4, 8003140 <_malloc_r+0x90>
 80030e8:	4629      	mov	r1, r5
 80030ea:	4638      	mov	r0, r7
 80030ec:	f7ff ffc0 	bl	8003070 <sbrk_aligned>
 80030f0:	1c43      	adds	r3, r0, #1
 80030f2:	4604      	mov	r4, r0
 80030f4:	d155      	bne.n	80031a2 <_malloc_r+0xf2>
 80030f6:	f8d8 4000 	ldr.w	r4, [r8]
 80030fa:	4626      	mov	r6, r4
 80030fc:	2e00      	cmp	r6, #0
 80030fe:	d145      	bne.n	800318c <_malloc_r+0xdc>
 8003100:	2c00      	cmp	r4, #0
 8003102:	d048      	beq.n	8003196 <_malloc_r+0xe6>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	4631      	mov	r1, r6
 8003108:	4638      	mov	r0, r7
 800310a:	eb04 0903 	add.w	r9, r4, r3
 800310e:	f000 fc6f 	bl	80039f0 <_sbrk_r>
 8003112:	4581      	cmp	r9, r0
 8003114:	d13f      	bne.n	8003196 <_malloc_r+0xe6>
 8003116:	6821      	ldr	r1, [r4, #0]
 8003118:	1a6d      	subs	r5, r5, r1
 800311a:	4629      	mov	r1, r5
 800311c:	4638      	mov	r0, r7
 800311e:	f7ff ffa7 	bl	8003070 <sbrk_aligned>
 8003122:	3001      	adds	r0, #1
 8003124:	d037      	beq.n	8003196 <_malloc_r+0xe6>
 8003126:	6823      	ldr	r3, [r4, #0]
 8003128:	442b      	add	r3, r5
 800312a:	6023      	str	r3, [r4, #0]
 800312c:	f8d8 3000 	ldr.w	r3, [r8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d038      	beq.n	80031a6 <_malloc_r+0xf6>
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	42a2      	cmp	r2, r4
 8003138:	d12b      	bne.n	8003192 <_malloc_r+0xe2>
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	e00f      	b.n	8003160 <_malloc_r+0xb0>
 8003140:	6822      	ldr	r2, [r4, #0]
 8003142:	1b52      	subs	r2, r2, r5
 8003144:	d41f      	bmi.n	8003186 <_malloc_r+0xd6>
 8003146:	2a0b      	cmp	r2, #11
 8003148:	d917      	bls.n	800317a <_malloc_r+0xca>
 800314a:	1961      	adds	r1, r4, r5
 800314c:	42a3      	cmp	r3, r4
 800314e:	6025      	str	r5, [r4, #0]
 8003150:	bf18      	it	ne
 8003152:	6059      	strne	r1, [r3, #4]
 8003154:	6863      	ldr	r3, [r4, #4]
 8003156:	bf08      	it	eq
 8003158:	f8c8 1000 	streq.w	r1, [r8]
 800315c:	5162      	str	r2, [r4, r5]
 800315e:	604b      	str	r3, [r1, #4]
 8003160:	4638      	mov	r0, r7
 8003162:	f104 060b 	add.w	r6, r4, #11
 8003166:	f000 f829 	bl	80031bc <__malloc_unlock>
 800316a:	f026 0607 	bic.w	r6, r6, #7
 800316e:	1d23      	adds	r3, r4, #4
 8003170:	1af2      	subs	r2, r6, r3
 8003172:	d0ae      	beq.n	80030d2 <_malloc_r+0x22>
 8003174:	1b9b      	subs	r3, r3, r6
 8003176:	50a3      	str	r3, [r4, r2]
 8003178:	e7ab      	b.n	80030d2 <_malloc_r+0x22>
 800317a:	42a3      	cmp	r3, r4
 800317c:	6862      	ldr	r2, [r4, #4]
 800317e:	d1dd      	bne.n	800313c <_malloc_r+0x8c>
 8003180:	f8c8 2000 	str.w	r2, [r8]
 8003184:	e7ec      	b.n	8003160 <_malloc_r+0xb0>
 8003186:	4623      	mov	r3, r4
 8003188:	6864      	ldr	r4, [r4, #4]
 800318a:	e7ac      	b.n	80030e6 <_malloc_r+0x36>
 800318c:	4634      	mov	r4, r6
 800318e:	6876      	ldr	r6, [r6, #4]
 8003190:	e7b4      	b.n	80030fc <_malloc_r+0x4c>
 8003192:	4613      	mov	r3, r2
 8003194:	e7cc      	b.n	8003130 <_malloc_r+0x80>
 8003196:	230c      	movs	r3, #12
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	4638      	mov	r0, r7
 800319c:	f000 f80e 	bl	80031bc <__malloc_unlock>
 80031a0:	e797      	b.n	80030d2 <_malloc_r+0x22>
 80031a2:	6025      	str	r5, [r4, #0]
 80031a4:	e7dc      	b.n	8003160 <_malloc_r+0xb0>
 80031a6:	605b      	str	r3, [r3, #4]
 80031a8:	deff      	udf	#255	; 0xff
 80031aa:	bf00      	nop
 80031ac:	200002cc 	.word	0x200002cc

080031b0 <__malloc_lock>:
 80031b0:	4801      	ldr	r0, [pc, #4]	; (80031b8 <__malloc_lock+0x8>)
 80031b2:	f7ff bf0f 	b.w	8002fd4 <__retarget_lock_acquire_recursive>
 80031b6:	bf00      	nop
 80031b8:	200002c8 	.word	0x200002c8

080031bc <__malloc_unlock>:
 80031bc:	4801      	ldr	r0, [pc, #4]	; (80031c4 <__malloc_unlock+0x8>)
 80031be:	f7ff bf0a 	b.w	8002fd6 <__retarget_lock_release_recursive>
 80031c2:	bf00      	nop
 80031c4:	200002c8 	.word	0x200002c8

080031c8 <__sfputc_r>:
 80031c8:	6893      	ldr	r3, [r2, #8]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	b410      	push	{r4}
 80031d0:	6093      	str	r3, [r2, #8]
 80031d2:	da08      	bge.n	80031e6 <__sfputc_r+0x1e>
 80031d4:	6994      	ldr	r4, [r2, #24]
 80031d6:	42a3      	cmp	r3, r4
 80031d8:	db01      	blt.n	80031de <__sfputc_r+0x16>
 80031da:	290a      	cmp	r1, #10
 80031dc:	d103      	bne.n	80031e6 <__sfputc_r+0x1e>
 80031de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031e2:	f7ff bd36 	b.w	8002c52 <__swbuf_r>
 80031e6:	6813      	ldr	r3, [r2, #0]
 80031e8:	1c58      	adds	r0, r3, #1
 80031ea:	6010      	str	r0, [r2, #0]
 80031ec:	7019      	strb	r1, [r3, #0]
 80031ee:	4608      	mov	r0, r1
 80031f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <__sfputs_r>:
 80031f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f8:	4606      	mov	r6, r0
 80031fa:	460f      	mov	r7, r1
 80031fc:	4614      	mov	r4, r2
 80031fe:	18d5      	adds	r5, r2, r3
 8003200:	42ac      	cmp	r4, r5
 8003202:	d101      	bne.n	8003208 <__sfputs_r+0x12>
 8003204:	2000      	movs	r0, #0
 8003206:	e007      	b.n	8003218 <__sfputs_r+0x22>
 8003208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800320c:	463a      	mov	r2, r7
 800320e:	4630      	mov	r0, r6
 8003210:	f7ff ffda 	bl	80031c8 <__sfputc_r>
 8003214:	1c43      	adds	r3, r0, #1
 8003216:	d1f3      	bne.n	8003200 <__sfputs_r+0xa>
 8003218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800321c <_vfiprintf_r>:
 800321c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003220:	460d      	mov	r5, r1
 8003222:	b09d      	sub	sp, #116	; 0x74
 8003224:	4614      	mov	r4, r2
 8003226:	4698      	mov	r8, r3
 8003228:	4606      	mov	r6, r0
 800322a:	b118      	cbz	r0, 8003234 <_vfiprintf_r+0x18>
 800322c:	6a03      	ldr	r3, [r0, #32]
 800322e:	b90b      	cbnz	r3, 8003234 <_vfiprintf_r+0x18>
 8003230:	f7ff fb0c 	bl	800284c <__sinit>
 8003234:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003236:	07d9      	lsls	r1, r3, #31
 8003238:	d405      	bmi.n	8003246 <_vfiprintf_r+0x2a>
 800323a:	89ab      	ldrh	r3, [r5, #12]
 800323c:	059a      	lsls	r2, r3, #22
 800323e:	d402      	bmi.n	8003246 <_vfiprintf_r+0x2a>
 8003240:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003242:	f7ff fec7 	bl	8002fd4 <__retarget_lock_acquire_recursive>
 8003246:	89ab      	ldrh	r3, [r5, #12]
 8003248:	071b      	lsls	r3, r3, #28
 800324a:	d501      	bpl.n	8003250 <_vfiprintf_r+0x34>
 800324c:	692b      	ldr	r3, [r5, #16]
 800324e:	b99b      	cbnz	r3, 8003278 <_vfiprintf_r+0x5c>
 8003250:	4629      	mov	r1, r5
 8003252:	4630      	mov	r0, r6
 8003254:	f7ff fd3a 	bl	8002ccc <__swsetup_r>
 8003258:	b170      	cbz	r0, 8003278 <_vfiprintf_r+0x5c>
 800325a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800325c:	07dc      	lsls	r4, r3, #31
 800325e:	d504      	bpl.n	800326a <_vfiprintf_r+0x4e>
 8003260:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003264:	b01d      	add	sp, #116	; 0x74
 8003266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800326a:	89ab      	ldrh	r3, [r5, #12]
 800326c:	0598      	lsls	r0, r3, #22
 800326e:	d4f7      	bmi.n	8003260 <_vfiprintf_r+0x44>
 8003270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003272:	f7ff feb0 	bl	8002fd6 <__retarget_lock_release_recursive>
 8003276:	e7f3      	b.n	8003260 <_vfiprintf_r+0x44>
 8003278:	2300      	movs	r3, #0
 800327a:	9309      	str	r3, [sp, #36]	; 0x24
 800327c:	2320      	movs	r3, #32
 800327e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003282:	f8cd 800c 	str.w	r8, [sp, #12]
 8003286:	2330      	movs	r3, #48	; 0x30
 8003288:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800343c <_vfiprintf_r+0x220>
 800328c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003290:	f04f 0901 	mov.w	r9, #1
 8003294:	4623      	mov	r3, r4
 8003296:	469a      	mov	sl, r3
 8003298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800329c:	b10a      	cbz	r2, 80032a2 <_vfiprintf_r+0x86>
 800329e:	2a25      	cmp	r2, #37	; 0x25
 80032a0:	d1f9      	bne.n	8003296 <_vfiprintf_r+0x7a>
 80032a2:	ebba 0b04 	subs.w	fp, sl, r4
 80032a6:	d00b      	beq.n	80032c0 <_vfiprintf_r+0xa4>
 80032a8:	465b      	mov	r3, fp
 80032aa:	4622      	mov	r2, r4
 80032ac:	4629      	mov	r1, r5
 80032ae:	4630      	mov	r0, r6
 80032b0:	f7ff ffa1 	bl	80031f6 <__sfputs_r>
 80032b4:	3001      	adds	r0, #1
 80032b6:	f000 80a9 	beq.w	800340c <_vfiprintf_r+0x1f0>
 80032ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80032bc:	445a      	add	r2, fp
 80032be:	9209      	str	r2, [sp, #36]	; 0x24
 80032c0:	f89a 3000 	ldrb.w	r3, [sl]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a1 	beq.w	800340c <_vfiprintf_r+0x1f0>
 80032ca:	2300      	movs	r3, #0
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80032d4:	f10a 0a01 	add.w	sl, sl, #1
 80032d8:	9304      	str	r3, [sp, #16]
 80032da:	9307      	str	r3, [sp, #28]
 80032dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80032e0:	931a      	str	r3, [sp, #104]	; 0x68
 80032e2:	4654      	mov	r4, sl
 80032e4:	2205      	movs	r2, #5
 80032e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032ea:	4854      	ldr	r0, [pc, #336]	; (800343c <_vfiprintf_r+0x220>)
 80032ec:	f7fc ff80 	bl	80001f0 <memchr>
 80032f0:	9a04      	ldr	r2, [sp, #16]
 80032f2:	b9d8      	cbnz	r0, 800332c <_vfiprintf_r+0x110>
 80032f4:	06d1      	lsls	r1, r2, #27
 80032f6:	bf44      	itt	mi
 80032f8:	2320      	movmi	r3, #32
 80032fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80032fe:	0713      	lsls	r3, r2, #28
 8003300:	bf44      	itt	mi
 8003302:	232b      	movmi	r3, #43	; 0x2b
 8003304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003308:	f89a 3000 	ldrb.w	r3, [sl]
 800330c:	2b2a      	cmp	r3, #42	; 0x2a
 800330e:	d015      	beq.n	800333c <_vfiprintf_r+0x120>
 8003310:	9a07      	ldr	r2, [sp, #28]
 8003312:	4654      	mov	r4, sl
 8003314:	2000      	movs	r0, #0
 8003316:	f04f 0c0a 	mov.w	ip, #10
 800331a:	4621      	mov	r1, r4
 800331c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003320:	3b30      	subs	r3, #48	; 0x30
 8003322:	2b09      	cmp	r3, #9
 8003324:	d94d      	bls.n	80033c2 <_vfiprintf_r+0x1a6>
 8003326:	b1b0      	cbz	r0, 8003356 <_vfiprintf_r+0x13a>
 8003328:	9207      	str	r2, [sp, #28]
 800332a:	e014      	b.n	8003356 <_vfiprintf_r+0x13a>
 800332c:	eba0 0308 	sub.w	r3, r0, r8
 8003330:	fa09 f303 	lsl.w	r3, r9, r3
 8003334:	4313      	orrs	r3, r2
 8003336:	9304      	str	r3, [sp, #16]
 8003338:	46a2      	mov	sl, r4
 800333a:	e7d2      	b.n	80032e2 <_vfiprintf_r+0xc6>
 800333c:	9b03      	ldr	r3, [sp, #12]
 800333e:	1d19      	adds	r1, r3, #4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	9103      	str	r1, [sp, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	bfbb      	ittet	lt
 8003348:	425b      	neglt	r3, r3
 800334a:	f042 0202 	orrlt.w	r2, r2, #2
 800334e:	9307      	strge	r3, [sp, #28]
 8003350:	9307      	strlt	r3, [sp, #28]
 8003352:	bfb8      	it	lt
 8003354:	9204      	strlt	r2, [sp, #16]
 8003356:	7823      	ldrb	r3, [r4, #0]
 8003358:	2b2e      	cmp	r3, #46	; 0x2e
 800335a:	d10c      	bne.n	8003376 <_vfiprintf_r+0x15a>
 800335c:	7863      	ldrb	r3, [r4, #1]
 800335e:	2b2a      	cmp	r3, #42	; 0x2a
 8003360:	d134      	bne.n	80033cc <_vfiprintf_r+0x1b0>
 8003362:	9b03      	ldr	r3, [sp, #12]
 8003364:	1d1a      	adds	r2, r3, #4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	9203      	str	r2, [sp, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	bfb8      	it	lt
 800336e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003372:	3402      	adds	r4, #2
 8003374:	9305      	str	r3, [sp, #20]
 8003376:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800344c <_vfiprintf_r+0x230>
 800337a:	7821      	ldrb	r1, [r4, #0]
 800337c:	2203      	movs	r2, #3
 800337e:	4650      	mov	r0, sl
 8003380:	f7fc ff36 	bl	80001f0 <memchr>
 8003384:	b138      	cbz	r0, 8003396 <_vfiprintf_r+0x17a>
 8003386:	9b04      	ldr	r3, [sp, #16]
 8003388:	eba0 000a 	sub.w	r0, r0, sl
 800338c:	2240      	movs	r2, #64	; 0x40
 800338e:	4082      	lsls	r2, r0
 8003390:	4313      	orrs	r3, r2
 8003392:	3401      	adds	r4, #1
 8003394:	9304      	str	r3, [sp, #16]
 8003396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800339a:	4829      	ldr	r0, [pc, #164]	; (8003440 <_vfiprintf_r+0x224>)
 800339c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80033a0:	2206      	movs	r2, #6
 80033a2:	f7fc ff25 	bl	80001f0 <memchr>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d03f      	beq.n	800342a <_vfiprintf_r+0x20e>
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <_vfiprintf_r+0x228>)
 80033ac:	bb1b      	cbnz	r3, 80033f6 <_vfiprintf_r+0x1da>
 80033ae:	9b03      	ldr	r3, [sp, #12]
 80033b0:	3307      	adds	r3, #7
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	3308      	adds	r3, #8
 80033b8:	9303      	str	r3, [sp, #12]
 80033ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033bc:	443b      	add	r3, r7
 80033be:	9309      	str	r3, [sp, #36]	; 0x24
 80033c0:	e768      	b.n	8003294 <_vfiprintf_r+0x78>
 80033c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80033c6:	460c      	mov	r4, r1
 80033c8:	2001      	movs	r0, #1
 80033ca:	e7a6      	b.n	800331a <_vfiprintf_r+0xfe>
 80033cc:	2300      	movs	r3, #0
 80033ce:	3401      	adds	r4, #1
 80033d0:	9305      	str	r3, [sp, #20]
 80033d2:	4619      	mov	r1, r3
 80033d4:	f04f 0c0a 	mov.w	ip, #10
 80033d8:	4620      	mov	r0, r4
 80033da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80033de:	3a30      	subs	r2, #48	; 0x30
 80033e0:	2a09      	cmp	r2, #9
 80033e2:	d903      	bls.n	80033ec <_vfiprintf_r+0x1d0>
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0c6      	beq.n	8003376 <_vfiprintf_r+0x15a>
 80033e8:	9105      	str	r1, [sp, #20]
 80033ea:	e7c4      	b.n	8003376 <_vfiprintf_r+0x15a>
 80033ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80033f0:	4604      	mov	r4, r0
 80033f2:	2301      	movs	r3, #1
 80033f4:	e7f0      	b.n	80033d8 <_vfiprintf_r+0x1bc>
 80033f6:	ab03      	add	r3, sp, #12
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	462a      	mov	r2, r5
 80033fc:	4b12      	ldr	r3, [pc, #72]	; (8003448 <_vfiprintf_r+0x22c>)
 80033fe:	a904      	add	r1, sp, #16
 8003400:	4630      	mov	r0, r6
 8003402:	f3af 8000 	nop.w
 8003406:	4607      	mov	r7, r0
 8003408:	1c78      	adds	r0, r7, #1
 800340a:	d1d6      	bne.n	80033ba <_vfiprintf_r+0x19e>
 800340c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800340e:	07d9      	lsls	r1, r3, #31
 8003410:	d405      	bmi.n	800341e <_vfiprintf_r+0x202>
 8003412:	89ab      	ldrh	r3, [r5, #12]
 8003414:	059a      	lsls	r2, r3, #22
 8003416:	d402      	bmi.n	800341e <_vfiprintf_r+0x202>
 8003418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800341a:	f7ff fddc 	bl	8002fd6 <__retarget_lock_release_recursive>
 800341e:	89ab      	ldrh	r3, [r5, #12]
 8003420:	065b      	lsls	r3, r3, #25
 8003422:	f53f af1d 	bmi.w	8003260 <_vfiprintf_r+0x44>
 8003426:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003428:	e71c      	b.n	8003264 <_vfiprintf_r+0x48>
 800342a:	ab03      	add	r3, sp, #12
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	462a      	mov	r2, r5
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <_vfiprintf_r+0x22c>)
 8003432:	a904      	add	r1, sp, #16
 8003434:	4630      	mov	r0, r6
 8003436:	f000 f879 	bl	800352c <_printf_i>
 800343a:	e7e4      	b.n	8003406 <_vfiprintf_r+0x1ea>
 800343c:	08003b3a 	.word	0x08003b3a
 8003440:	08003b44 	.word	0x08003b44
 8003444:	00000000 	.word	0x00000000
 8003448:	080031f7 	.word	0x080031f7
 800344c:	08003b40 	.word	0x08003b40

08003450 <_printf_common>:
 8003450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003454:	4616      	mov	r6, r2
 8003456:	4699      	mov	r9, r3
 8003458:	688a      	ldr	r2, [r1, #8]
 800345a:	690b      	ldr	r3, [r1, #16]
 800345c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003460:	4293      	cmp	r3, r2
 8003462:	bfb8      	it	lt
 8003464:	4613      	movlt	r3, r2
 8003466:	6033      	str	r3, [r6, #0]
 8003468:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800346c:	4607      	mov	r7, r0
 800346e:	460c      	mov	r4, r1
 8003470:	b10a      	cbz	r2, 8003476 <_printf_common+0x26>
 8003472:	3301      	adds	r3, #1
 8003474:	6033      	str	r3, [r6, #0]
 8003476:	6823      	ldr	r3, [r4, #0]
 8003478:	0699      	lsls	r1, r3, #26
 800347a:	bf42      	ittt	mi
 800347c:	6833      	ldrmi	r3, [r6, #0]
 800347e:	3302      	addmi	r3, #2
 8003480:	6033      	strmi	r3, [r6, #0]
 8003482:	6825      	ldr	r5, [r4, #0]
 8003484:	f015 0506 	ands.w	r5, r5, #6
 8003488:	d106      	bne.n	8003498 <_printf_common+0x48>
 800348a:	f104 0a19 	add.w	sl, r4, #25
 800348e:	68e3      	ldr	r3, [r4, #12]
 8003490:	6832      	ldr	r2, [r6, #0]
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	42ab      	cmp	r3, r5
 8003496:	dc26      	bgt.n	80034e6 <_printf_common+0x96>
 8003498:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800349c:	1e13      	subs	r3, r2, #0
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	bf18      	it	ne
 80034a2:	2301      	movne	r3, #1
 80034a4:	0692      	lsls	r2, r2, #26
 80034a6:	d42b      	bmi.n	8003500 <_printf_common+0xb0>
 80034a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80034ac:	4649      	mov	r1, r9
 80034ae:	4638      	mov	r0, r7
 80034b0:	47c0      	blx	r8
 80034b2:	3001      	adds	r0, #1
 80034b4:	d01e      	beq.n	80034f4 <_printf_common+0xa4>
 80034b6:	6823      	ldr	r3, [r4, #0]
 80034b8:	6922      	ldr	r2, [r4, #16]
 80034ba:	f003 0306 	and.w	r3, r3, #6
 80034be:	2b04      	cmp	r3, #4
 80034c0:	bf02      	ittt	eq
 80034c2:	68e5      	ldreq	r5, [r4, #12]
 80034c4:	6833      	ldreq	r3, [r6, #0]
 80034c6:	1aed      	subeq	r5, r5, r3
 80034c8:	68a3      	ldr	r3, [r4, #8]
 80034ca:	bf0c      	ite	eq
 80034cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034d0:	2500      	movne	r5, #0
 80034d2:	4293      	cmp	r3, r2
 80034d4:	bfc4      	itt	gt
 80034d6:	1a9b      	subgt	r3, r3, r2
 80034d8:	18ed      	addgt	r5, r5, r3
 80034da:	2600      	movs	r6, #0
 80034dc:	341a      	adds	r4, #26
 80034de:	42b5      	cmp	r5, r6
 80034e0:	d11a      	bne.n	8003518 <_printf_common+0xc8>
 80034e2:	2000      	movs	r0, #0
 80034e4:	e008      	b.n	80034f8 <_printf_common+0xa8>
 80034e6:	2301      	movs	r3, #1
 80034e8:	4652      	mov	r2, sl
 80034ea:	4649      	mov	r1, r9
 80034ec:	4638      	mov	r0, r7
 80034ee:	47c0      	blx	r8
 80034f0:	3001      	adds	r0, #1
 80034f2:	d103      	bne.n	80034fc <_printf_common+0xac>
 80034f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fc:	3501      	adds	r5, #1
 80034fe:	e7c6      	b.n	800348e <_printf_common+0x3e>
 8003500:	18e1      	adds	r1, r4, r3
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	2030      	movs	r0, #48	; 0x30
 8003506:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800350a:	4422      	add	r2, r4
 800350c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003510:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003514:	3302      	adds	r3, #2
 8003516:	e7c7      	b.n	80034a8 <_printf_common+0x58>
 8003518:	2301      	movs	r3, #1
 800351a:	4622      	mov	r2, r4
 800351c:	4649      	mov	r1, r9
 800351e:	4638      	mov	r0, r7
 8003520:	47c0      	blx	r8
 8003522:	3001      	adds	r0, #1
 8003524:	d0e6      	beq.n	80034f4 <_printf_common+0xa4>
 8003526:	3601      	adds	r6, #1
 8003528:	e7d9      	b.n	80034de <_printf_common+0x8e>
	...

0800352c <_printf_i>:
 800352c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003530:	7e0f      	ldrb	r7, [r1, #24]
 8003532:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003534:	2f78      	cmp	r7, #120	; 0x78
 8003536:	4691      	mov	r9, r2
 8003538:	4680      	mov	r8, r0
 800353a:	460c      	mov	r4, r1
 800353c:	469a      	mov	sl, r3
 800353e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003542:	d807      	bhi.n	8003554 <_printf_i+0x28>
 8003544:	2f62      	cmp	r7, #98	; 0x62
 8003546:	d80a      	bhi.n	800355e <_printf_i+0x32>
 8003548:	2f00      	cmp	r7, #0
 800354a:	f000 80d4 	beq.w	80036f6 <_printf_i+0x1ca>
 800354e:	2f58      	cmp	r7, #88	; 0x58
 8003550:	f000 80c0 	beq.w	80036d4 <_printf_i+0x1a8>
 8003554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003558:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800355c:	e03a      	b.n	80035d4 <_printf_i+0xa8>
 800355e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003562:	2b15      	cmp	r3, #21
 8003564:	d8f6      	bhi.n	8003554 <_printf_i+0x28>
 8003566:	a101      	add	r1, pc, #4	; (adr r1, 800356c <_printf_i+0x40>)
 8003568:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800356c:	080035c5 	.word	0x080035c5
 8003570:	080035d9 	.word	0x080035d9
 8003574:	08003555 	.word	0x08003555
 8003578:	08003555 	.word	0x08003555
 800357c:	08003555 	.word	0x08003555
 8003580:	08003555 	.word	0x08003555
 8003584:	080035d9 	.word	0x080035d9
 8003588:	08003555 	.word	0x08003555
 800358c:	08003555 	.word	0x08003555
 8003590:	08003555 	.word	0x08003555
 8003594:	08003555 	.word	0x08003555
 8003598:	080036dd 	.word	0x080036dd
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003697 	.word	0x08003697
 80035a4:	08003555 	.word	0x08003555
 80035a8:	08003555 	.word	0x08003555
 80035ac:	080036ff 	.word	0x080036ff
 80035b0:	08003555 	.word	0x08003555
 80035b4:	08003605 	.word	0x08003605
 80035b8:	08003555 	.word	0x08003555
 80035bc:	08003555 	.word	0x08003555
 80035c0:	0800369f 	.word	0x0800369f
 80035c4:	682b      	ldr	r3, [r5, #0]
 80035c6:	1d1a      	adds	r2, r3, #4
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	602a      	str	r2, [r5, #0]
 80035cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035d4:	2301      	movs	r3, #1
 80035d6:	e09f      	b.n	8003718 <_printf_i+0x1ec>
 80035d8:	6820      	ldr	r0, [r4, #0]
 80035da:	682b      	ldr	r3, [r5, #0]
 80035dc:	0607      	lsls	r7, r0, #24
 80035de:	f103 0104 	add.w	r1, r3, #4
 80035e2:	6029      	str	r1, [r5, #0]
 80035e4:	d501      	bpl.n	80035ea <_printf_i+0xbe>
 80035e6:	681e      	ldr	r6, [r3, #0]
 80035e8:	e003      	b.n	80035f2 <_printf_i+0xc6>
 80035ea:	0646      	lsls	r6, r0, #25
 80035ec:	d5fb      	bpl.n	80035e6 <_printf_i+0xba>
 80035ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80035f2:	2e00      	cmp	r6, #0
 80035f4:	da03      	bge.n	80035fe <_printf_i+0xd2>
 80035f6:	232d      	movs	r3, #45	; 0x2d
 80035f8:	4276      	negs	r6, r6
 80035fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035fe:	485a      	ldr	r0, [pc, #360]	; (8003768 <_printf_i+0x23c>)
 8003600:	230a      	movs	r3, #10
 8003602:	e012      	b.n	800362a <_printf_i+0xfe>
 8003604:	682b      	ldr	r3, [r5, #0]
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	1d19      	adds	r1, r3, #4
 800360a:	6029      	str	r1, [r5, #0]
 800360c:	0605      	lsls	r5, r0, #24
 800360e:	d501      	bpl.n	8003614 <_printf_i+0xe8>
 8003610:	681e      	ldr	r6, [r3, #0]
 8003612:	e002      	b.n	800361a <_printf_i+0xee>
 8003614:	0641      	lsls	r1, r0, #25
 8003616:	d5fb      	bpl.n	8003610 <_printf_i+0xe4>
 8003618:	881e      	ldrh	r6, [r3, #0]
 800361a:	4853      	ldr	r0, [pc, #332]	; (8003768 <_printf_i+0x23c>)
 800361c:	2f6f      	cmp	r7, #111	; 0x6f
 800361e:	bf0c      	ite	eq
 8003620:	2308      	moveq	r3, #8
 8003622:	230a      	movne	r3, #10
 8003624:	2100      	movs	r1, #0
 8003626:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800362a:	6865      	ldr	r5, [r4, #4]
 800362c:	60a5      	str	r5, [r4, #8]
 800362e:	2d00      	cmp	r5, #0
 8003630:	bfa2      	ittt	ge
 8003632:	6821      	ldrge	r1, [r4, #0]
 8003634:	f021 0104 	bicge.w	r1, r1, #4
 8003638:	6021      	strge	r1, [r4, #0]
 800363a:	b90e      	cbnz	r6, 8003640 <_printf_i+0x114>
 800363c:	2d00      	cmp	r5, #0
 800363e:	d04b      	beq.n	80036d8 <_printf_i+0x1ac>
 8003640:	4615      	mov	r5, r2
 8003642:	fbb6 f1f3 	udiv	r1, r6, r3
 8003646:	fb03 6711 	mls	r7, r3, r1, r6
 800364a:	5dc7      	ldrb	r7, [r0, r7]
 800364c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003650:	4637      	mov	r7, r6
 8003652:	42bb      	cmp	r3, r7
 8003654:	460e      	mov	r6, r1
 8003656:	d9f4      	bls.n	8003642 <_printf_i+0x116>
 8003658:	2b08      	cmp	r3, #8
 800365a:	d10b      	bne.n	8003674 <_printf_i+0x148>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	07de      	lsls	r6, r3, #31
 8003660:	d508      	bpl.n	8003674 <_printf_i+0x148>
 8003662:	6923      	ldr	r3, [r4, #16]
 8003664:	6861      	ldr	r1, [r4, #4]
 8003666:	4299      	cmp	r1, r3
 8003668:	bfde      	ittt	le
 800366a:	2330      	movle	r3, #48	; 0x30
 800366c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003670:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003674:	1b52      	subs	r2, r2, r5
 8003676:	6122      	str	r2, [r4, #16]
 8003678:	f8cd a000 	str.w	sl, [sp]
 800367c:	464b      	mov	r3, r9
 800367e:	aa03      	add	r2, sp, #12
 8003680:	4621      	mov	r1, r4
 8003682:	4640      	mov	r0, r8
 8003684:	f7ff fee4 	bl	8003450 <_printf_common>
 8003688:	3001      	adds	r0, #1
 800368a:	d14a      	bne.n	8003722 <_printf_i+0x1f6>
 800368c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003690:	b004      	add	sp, #16
 8003692:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	f043 0320 	orr.w	r3, r3, #32
 800369c:	6023      	str	r3, [r4, #0]
 800369e:	4833      	ldr	r0, [pc, #204]	; (800376c <_printf_i+0x240>)
 80036a0:	2778      	movs	r7, #120	; 0x78
 80036a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80036a6:	6823      	ldr	r3, [r4, #0]
 80036a8:	6829      	ldr	r1, [r5, #0]
 80036aa:	061f      	lsls	r7, r3, #24
 80036ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80036b0:	d402      	bmi.n	80036b8 <_printf_i+0x18c>
 80036b2:	065f      	lsls	r7, r3, #25
 80036b4:	bf48      	it	mi
 80036b6:	b2b6      	uxthmi	r6, r6
 80036b8:	07df      	lsls	r7, r3, #31
 80036ba:	bf48      	it	mi
 80036bc:	f043 0320 	orrmi.w	r3, r3, #32
 80036c0:	6029      	str	r1, [r5, #0]
 80036c2:	bf48      	it	mi
 80036c4:	6023      	strmi	r3, [r4, #0]
 80036c6:	b91e      	cbnz	r6, 80036d0 <_printf_i+0x1a4>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	f023 0320 	bic.w	r3, r3, #32
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	2310      	movs	r3, #16
 80036d2:	e7a7      	b.n	8003624 <_printf_i+0xf8>
 80036d4:	4824      	ldr	r0, [pc, #144]	; (8003768 <_printf_i+0x23c>)
 80036d6:	e7e4      	b.n	80036a2 <_printf_i+0x176>
 80036d8:	4615      	mov	r5, r2
 80036da:	e7bd      	b.n	8003658 <_printf_i+0x12c>
 80036dc:	682b      	ldr	r3, [r5, #0]
 80036de:	6826      	ldr	r6, [r4, #0]
 80036e0:	6961      	ldr	r1, [r4, #20]
 80036e2:	1d18      	adds	r0, r3, #4
 80036e4:	6028      	str	r0, [r5, #0]
 80036e6:	0635      	lsls	r5, r6, #24
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	d501      	bpl.n	80036f0 <_printf_i+0x1c4>
 80036ec:	6019      	str	r1, [r3, #0]
 80036ee:	e002      	b.n	80036f6 <_printf_i+0x1ca>
 80036f0:	0670      	lsls	r0, r6, #25
 80036f2:	d5fb      	bpl.n	80036ec <_printf_i+0x1c0>
 80036f4:	8019      	strh	r1, [r3, #0]
 80036f6:	2300      	movs	r3, #0
 80036f8:	6123      	str	r3, [r4, #16]
 80036fa:	4615      	mov	r5, r2
 80036fc:	e7bc      	b.n	8003678 <_printf_i+0x14c>
 80036fe:	682b      	ldr	r3, [r5, #0]
 8003700:	1d1a      	adds	r2, r3, #4
 8003702:	602a      	str	r2, [r5, #0]
 8003704:	681d      	ldr	r5, [r3, #0]
 8003706:	6862      	ldr	r2, [r4, #4]
 8003708:	2100      	movs	r1, #0
 800370a:	4628      	mov	r0, r5
 800370c:	f7fc fd70 	bl	80001f0 <memchr>
 8003710:	b108      	cbz	r0, 8003716 <_printf_i+0x1ea>
 8003712:	1b40      	subs	r0, r0, r5
 8003714:	6060      	str	r0, [r4, #4]
 8003716:	6863      	ldr	r3, [r4, #4]
 8003718:	6123      	str	r3, [r4, #16]
 800371a:	2300      	movs	r3, #0
 800371c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003720:	e7aa      	b.n	8003678 <_printf_i+0x14c>
 8003722:	6923      	ldr	r3, [r4, #16]
 8003724:	462a      	mov	r2, r5
 8003726:	4649      	mov	r1, r9
 8003728:	4640      	mov	r0, r8
 800372a:	47d0      	blx	sl
 800372c:	3001      	adds	r0, #1
 800372e:	d0ad      	beq.n	800368c <_printf_i+0x160>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	079b      	lsls	r3, r3, #30
 8003734:	d413      	bmi.n	800375e <_printf_i+0x232>
 8003736:	68e0      	ldr	r0, [r4, #12]
 8003738:	9b03      	ldr	r3, [sp, #12]
 800373a:	4298      	cmp	r0, r3
 800373c:	bfb8      	it	lt
 800373e:	4618      	movlt	r0, r3
 8003740:	e7a6      	b.n	8003690 <_printf_i+0x164>
 8003742:	2301      	movs	r3, #1
 8003744:	4632      	mov	r2, r6
 8003746:	4649      	mov	r1, r9
 8003748:	4640      	mov	r0, r8
 800374a:	47d0      	blx	sl
 800374c:	3001      	adds	r0, #1
 800374e:	d09d      	beq.n	800368c <_printf_i+0x160>
 8003750:	3501      	adds	r5, #1
 8003752:	68e3      	ldr	r3, [r4, #12]
 8003754:	9903      	ldr	r1, [sp, #12]
 8003756:	1a5b      	subs	r3, r3, r1
 8003758:	42ab      	cmp	r3, r5
 800375a:	dcf2      	bgt.n	8003742 <_printf_i+0x216>
 800375c:	e7eb      	b.n	8003736 <_printf_i+0x20a>
 800375e:	2500      	movs	r5, #0
 8003760:	f104 0619 	add.w	r6, r4, #25
 8003764:	e7f5      	b.n	8003752 <_printf_i+0x226>
 8003766:	bf00      	nop
 8003768:	08003b4b 	.word	0x08003b4b
 800376c:	08003b5c 	.word	0x08003b5c

08003770 <__sflags>:
 8003770:	780b      	ldrb	r3, [r1, #0]
 8003772:	2b72      	cmp	r3, #114	; 0x72
 8003774:	b530      	push	{r4, r5, lr}
 8003776:	d022      	beq.n	80037be <__sflags+0x4e>
 8003778:	2b77      	cmp	r3, #119	; 0x77
 800377a:	d024      	beq.n	80037c6 <__sflags+0x56>
 800377c:	2b61      	cmp	r3, #97	; 0x61
 800377e:	d027      	beq.n	80037d0 <__sflags+0x60>
 8003780:	2316      	movs	r3, #22
 8003782:	6003      	str	r3, [r0, #0]
 8003784:	2000      	movs	r0, #0
 8003786:	bd30      	pop	{r4, r5, pc}
 8003788:	2d62      	cmp	r5, #98	; 0x62
 800378a:	d012      	beq.n	80037b2 <__sflags+0x42>
 800378c:	2d78      	cmp	r5, #120	; 0x78
 800378e:	d013      	beq.n	80037b8 <__sflags+0x48>
 8003790:	2d2b      	cmp	r5, #43	; 0x2b
 8003792:	d107      	bne.n	80037a4 <__sflags+0x34>
 8003794:	f020 001c 	bic.w	r0, r0, #28
 8003798:	f023 0303 	bic.w	r3, r3, #3
 800379c:	f040 0010 	orr.w	r0, r0, #16
 80037a0:	f043 0302 	orr.w	r3, r3, #2
 80037a4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80037a8:	2d00      	cmp	r5, #0
 80037aa:	d1ed      	bne.n	8003788 <__sflags+0x18>
 80037ac:	4323      	orrs	r3, r4
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	e7e9      	b.n	8003786 <__sflags+0x16>
 80037b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037b6:	e7f5      	b.n	80037a4 <__sflags+0x34>
 80037b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80037bc:	e7f2      	b.n	80037a4 <__sflags+0x34>
 80037be:	2400      	movs	r4, #0
 80037c0:	4623      	mov	r3, r4
 80037c2:	2004      	movs	r0, #4
 80037c4:	e7ee      	b.n	80037a4 <__sflags+0x34>
 80037c6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80037ca:	2301      	movs	r3, #1
 80037cc:	2008      	movs	r0, #8
 80037ce:	e7e9      	b.n	80037a4 <__sflags+0x34>
 80037d0:	f44f 7402 	mov.w	r4, #520	; 0x208
 80037d4:	2301      	movs	r3, #1
 80037d6:	f44f 7084 	mov.w	r0, #264	; 0x108
 80037da:	e7e3      	b.n	80037a4 <__sflags+0x34>

080037dc <__swhatbuf_r>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	460c      	mov	r4, r1
 80037e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80037e4:	2900      	cmp	r1, #0
 80037e6:	b096      	sub	sp, #88	; 0x58
 80037e8:	4615      	mov	r5, r2
 80037ea:	461e      	mov	r6, r3
 80037ec:	da0d      	bge.n	800380a <__swhatbuf_r+0x2e>
 80037ee:	89a3      	ldrh	r3, [r4, #12]
 80037f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80037f4:	f04f 0100 	mov.w	r1, #0
 80037f8:	bf0c      	ite	eq
 80037fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80037fe:	2340      	movne	r3, #64	; 0x40
 8003800:	2000      	movs	r0, #0
 8003802:	6031      	str	r1, [r6, #0]
 8003804:	602b      	str	r3, [r5, #0]
 8003806:	b016      	add	sp, #88	; 0x58
 8003808:	bd70      	pop	{r4, r5, r6, pc}
 800380a:	466a      	mov	r2, sp
 800380c:	f000 f8ce 	bl	80039ac <_fstat_r>
 8003810:	2800      	cmp	r0, #0
 8003812:	dbec      	blt.n	80037ee <__swhatbuf_r+0x12>
 8003814:	9901      	ldr	r1, [sp, #4]
 8003816:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800381a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800381e:	4259      	negs	r1, r3
 8003820:	4159      	adcs	r1, r3
 8003822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003826:	e7eb      	b.n	8003800 <__swhatbuf_r+0x24>

08003828 <__smakebuf_r>:
 8003828:	898b      	ldrh	r3, [r1, #12]
 800382a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800382c:	079d      	lsls	r5, r3, #30
 800382e:	4606      	mov	r6, r0
 8003830:	460c      	mov	r4, r1
 8003832:	d507      	bpl.n	8003844 <__smakebuf_r+0x1c>
 8003834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003838:	6023      	str	r3, [r4, #0]
 800383a:	6123      	str	r3, [r4, #16]
 800383c:	2301      	movs	r3, #1
 800383e:	6163      	str	r3, [r4, #20]
 8003840:	b002      	add	sp, #8
 8003842:	bd70      	pop	{r4, r5, r6, pc}
 8003844:	ab01      	add	r3, sp, #4
 8003846:	466a      	mov	r2, sp
 8003848:	f7ff ffc8 	bl	80037dc <__swhatbuf_r>
 800384c:	9900      	ldr	r1, [sp, #0]
 800384e:	4605      	mov	r5, r0
 8003850:	4630      	mov	r0, r6
 8003852:	f7ff fc2d 	bl	80030b0 <_malloc_r>
 8003856:	b948      	cbnz	r0, 800386c <__smakebuf_r+0x44>
 8003858:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800385c:	059a      	lsls	r2, r3, #22
 800385e:	d4ef      	bmi.n	8003840 <__smakebuf_r+0x18>
 8003860:	f023 0303 	bic.w	r3, r3, #3
 8003864:	f043 0302 	orr.w	r3, r3, #2
 8003868:	81a3      	strh	r3, [r4, #12]
 800386a:	e7e3      	b.n	8003834 <__smakebuf_r+0xc>
 800386c:	89a3      	ldrh	r3, [r4, #12]
 800386e:	6020      	str	r0, [r4, #0]
 8003870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003874:	81a3      	strh	r3, [r4, #12]
 8003876:	9b00      	ldr	r3, [sp, #0]
 8003878:	6163      	str	r3, [r4, #20]
 800387a:	9b01      	ldr	r3, [sp, #4]
 800387c:	6120      	str	r0, [r4, #16]
 800387e:	b15b      	cbz	r3, 8003898 <__smakebuf_r+0x70>
 8003880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f8a3 	bl	80039d0 <_isatty_r>
 800388a:	b128      	cbz	r0, 8003898 <__smakebuf_r+0x70>
 800388c:	89a3      	ldrh	r3, [r4, #12]
 800388e:	f023 0303 	bic.w	r3, r3, #3
 8003892:	f043 0301 	orr.w	r3, r3, #1
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	89a3      	ldrh	r3, [r4, #12]
 800389a:	431d      	orrs	r5, r3
 800389c:	81a5      	strh	r5, [r4, #12]
 800389e:	e7cf      	b.n	8003840 <__smakebuf_r+0x18>

080038a0 <lflush>:
 80038a0:	898b      	ldrh	r3, [r1, #12]
 80038a2:	f003 0309 	and.w	r3, r3, #9
 80038a6:	2b09      	cmp	r3, #9
 80038a8:	d103      	bne.n	80038b2 <lflush+0x12>
 80038aa:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <lflush+0x18>)
 80038ac:	6818      	ldr	r0, [r3, #0]
 80038ae:	f7fe bec5 	b.w	800263c <_fflush_r>
 80038b2:	2000      	movs	r0, #0
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	2000006c 	.word	0x2000006c

080038bc <__srefill_r>:
 80038bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038be:	460c      	mov	r4, r1
 80038c0:	4605      	mov	r5, r0
 80038c2:	b118      	cbz	r0, 80038cc <__srefill_r+0x10>
 80038c4:	6a03      	ldr	r3, [r0, #32]
 80038c6:	b90b      	cbnz	r3, 80038cc <__srefill_r+0x10>
 80038c8:	f7fe ffc0 	bl	800284c <__sinit>
 80038cc:	2300      	movs	r3, #0
 80038ce:	6063      	str	r3, [r4, #4]
 80038d0:	89a3      	ldrh	r3, [r4, #12]
 80038d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80038d6:	069e      	lsls	r6, r3, #26
 80038d8:	d502      	bpl.n	80038e0 <__srefill_r+0x24>
 80038da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038de:	e05c      	b.n	800399a <__srefill_r+0xde>
 80038e0:	0758      	lsls	r0, r3, #29
 80038e2:	d448      	bmi.n	8003976 <__srefill_r+0xba>
 80038e4:	06d9      	lsls	r1, r3, #27
 80038e6:	d405      	bmi.n	80038f4 <__srefill_r+0x38>
 80038e8:	2309      	movs	r3, #9
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	e7f2      	b.n	80038da <__srefill_r+0x1e>
 80038f4:	071a      	lsls	r2, r3, #28
 80038f6:	d50b      	bpl.n	8003910 <__srefill_r+0x54>
 80038f8:	4621      	mov	r1, r4
 80038fa:	4628      	mov	r0, r5
 80038fc:	f7fe fe9e 	bl	800263c <_fflush_r>
 8003900:	2800      	cmp	r0, #0
 8003902:	d1ea      	bne.n	80038da <__srefill_r+0x1e>
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	60a0      	str	r0, [r4, #8]
 8003908:	f023 0308 	bic.w	r3, r3, #8
 800390c:	81a3      	strh	r3, [r4, #12]
 800390e:	61a0      	str	r0, [r4, #24]
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	f043 0304 	orr.w	r3, r3, #4
 8003916:	81a3      	strh	r3, [r4, #12]
 8003918:	6923      	ldr	r3, [r4, #16]
 800391a:	b91b      	cbnz	r3, 8003924 <__srefill_r+0x68>
 800391c:	4621      	mov	r1, r4
 800391e:	4628      	mov	r0, r5
 8003920:	f7ff ff82 	bl	8003828 <__smakebuf_r>
 8003924:	89a6      	ldrh	r6, [r4, #12]
 8003926:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 800392a:	07b3      	lsls	r3, r6, #30
 800392c:	d00f      	beq.n	800394e <__srefill_r+0x92>
 800392e:	2301      	movs	r3, #1
 8003930:	4a1b      	ldr	r2, [pc, #108]	; (80039a0 <__srefill_r+0xe4>)
 8003932:	491c      	ldr	r1, [pc, #112]	; (80039a4 <__srefill_r+0xe8>)
 8003934:	481c      	ldr	r0, [pc, #112]	; (80039a8 <__srefill_r+0xec>)
 8003936:	81a3      	strh	r3, [r4, #12]
 8003938:	f006 0609 	and.w	r6, r6, #9
 800393c:	f7ff f856 	bl	80029ec <_fwalk_sglue>
 8003940:	2e09      	cmp	r6, #9
 8003942:	81a7      	strh	r7, [r4, #12]
 8003944:	d103      	bne.n	800394e <__srefill_r+0x92>
 8003946:	4621      	mov	r1, r4
 8003948:	4628      	mov	r0, r5
 800394a:	f7fe fdf1 	bl	8002530 <__sflush_r>
 800394e:	6922      	ldr	r2, [r4, #16]
 8003950:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003952:	6963      	ldr	r3, [r4, #20]
 8003954:	6a21      	ldr	r1, [r4, #32]
 8003956:	6022      	str	r2, [r4, #0]
 8003958:	4628      	mov	r0, r5
 800395a:	47b0      	blx	r6
 800395c:	2800      	cmp	r0, #0
 800395e:	6060      	str	r0, [r4, #4]
 8003960:	dc1c      	bgt.n	800399c <__srefill_r+0xe0>
 8003962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003966:	bf17      	itett	ne
 8003968:	2200      	movne	r2, #0
 800396a:	f043 0320 	orreq.w	r3, r3, #32
 800396e:	6062      	strne	r2, [r4, #4]
 8003970:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8003974:	e7bc      	b.n	80038f0 <__srefill_r+0x34>
 8003976:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003978:	2900      	cmp	r1, #0
 800397a:	d0cd      	beq.n	8003918 <__srefill_r+0x5c>
 800397c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003980:	4299      	cmp	r1, r3
 8003982:	d002      	beq.n	800398a <__srefill_r+0xce>
 8003984:	4628      	mov	r0, r5
 8003986:	f7ff fb27 	bl	8002fd8 <_free_r>
 800398a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800398c:	6063      	str	r3, [r4, #4]
 800398e:	2000      	movs	r0, #0
 8003990:	6360      	str	r0, [r4, #52]	; 0x34
 8003992:	2b00      	cmp	r3, #0
 8003994:	d0c0      	beq.n	8003918 <__srefill_r+0x5c>
 8003996:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003998:	6023      	str	r3, [r4, #0]
 800399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800399c:	2000      	movs	r0, #0
 800399e:	e7fc      	b.n	800399a <__srefill_r+0xde>
 80039a0:	20000014 	.word	0x20000014
 80039a4:	080038a1 	.word	0x080038a1
 80039a8:	20000020 	.word	0x20000020

080039ac <_fstat_r>:
 80039ac:	b538      	push	{r3, r4, r5, lr}
 80039ae:	4d07      	ldr	r5, [pc, #28]	; (80039cc <_fstat_r+0x20>)
 80039b0:	2300      	movs	r3, #0
 80039b2:	4604      	mov	r4, r0
 80039b4:	4608      	mov	r0, r1
 80039b6:	4611      	mov	r1, r2
 80039b8:	602b      	str	r3, [r5, #0]
 80039ba:	f7fe fbcc 	bl	8002156 <_fstat>
 80039be:	1c43      	adds	r3, r0, #1
 80039c0:	d102      	bne.n	80039c8 <_fstat_r+0x1c>
 80039c2:	682b      	ldr	r3, [r5, #0]
 80039c4:	b103      	cbz	r3, 80039c8 <_fstat_r+0x1c>
 80039c6:	6023      	str	r3, [r4, #0]
 80039c8:	bd38      	pop	{r3, r4, r5, pc}
 80039ca:	bf00      	nop
 80039cc:	200002c4 	.word	0x200002c4

080039d0 <_isatty_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4d06      	ldr	r5, [pc, #24]	; (80039ec <_isatty_r+0x1c>)
 80039d4:	2300      	movs	r3, #0
 80039d6:	4604      	mov	r4, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	602b      	str	r3, [r5, #0]
 80039dc:	f7fe fd2c 	bl	8002438 <_isatty>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_isatty_r+0x1a>
 80039e4:	682b      	ldr	r3, [r5, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_isatty_r+0x1a>
 80039e8:	6023      	str	r3, [r4, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	200002c4 	.word	0x200002c4

080039f0 <_sbrk_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4d06      	ldr	r5, [pc, #24]	; (8003a0c <_sbrk_r+0x1c>)
 80039f4:	2300      	movs	r3, #0
 80039f6:	4604      	mov	r4, r0
 80039f8:	4608      	mov	r0, r1
 80039fa:	602b      	str	r3, [r5, #0]
 80039fc:	f7fc ffc8 	bl	8000990 <_sbrk>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d102      	bne.n	8003a0a <_sbrk_r+0x1a>
 8003a04:	682b      	ldr	r3, [r5, #0]
 8003a06:	b103      	cbz	r3, 8003a0a <_sbrk_r+0x1a>
 8003a08:	6023      	str	r3, [r4, #0]
 8003a0a:	bd38      	pop	{r3, r4, r5, pc}
 8003a0c:	200002c4 	.word	0x200002c4

08003a10 <_init>:
 8003a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a12:	bf00      	nop
 8003a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a16:	bc08      	pop	{r3}
 8003a18:	469e      	mov	lr, r3
 8003a1a:	4770      	bx	lr

08003a1c <_fini>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr
